{"id":"5ea59ddfc8da3316be9d7b7ac52c522c","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"contracts/Lock.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.27;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"},"contracts/MerkleProofVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract MerkleProofVerifier is Ownable {\r\n    bytes32 public merkleRoot;\r\n\r\n    event MerkleRootSet(bytes32 merkleRoot);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n        emit MerkleRootSet(_merkleRoot);\r\n    }\r\n\r\n    function verifyTransaction(bytes32[] calldata proof, bytes32 leaf) external view returns (bool) {\r\n        return MerkleProof.verify(proof, merkleRoot, leaf);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[177],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":178,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":177,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,177],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[177]},"id":178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"127:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":177,"linearizedBaseContracts":[177],"name":"Context","nameLocation":"642:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":158,"nodeType":"Block","src":"718:34:1","statements":[{"expression":{"expression":{"id":155,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:1","memberName":"sender","nodeType":"MemberAccess","src":"735:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":154,"id":157,"nodeType":"Return","src":"728:17:1"}]},"id":159,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:1","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"675:2:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":159,"src":"709:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:1"},"scope":177,"src":"656:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":167,"nodeType":"Block","src":"825:32:1","statements":[{"expression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:1","memberName":"data","nodeType":"MemberAccess","src":"842:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":163,"id":166,"nodeType":"Return","src":"835:15:1"}]},"id":168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"775:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"809:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:1"},"scope":177,"src":"758:99:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":175,"nodeType":"Block","src":"935:25:1","statements":[{"expression":{"hexValue":"30","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":172,"id":174,"nodeType":"Return","src":"945:8:1"}]},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"892:2:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":176,"src":"926:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:1"},"scope":177,"src":"863:97:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":178,"src":"624:338:1","usedErrors":[],"usedEvents":[]}],"src":"101:862:1"},"id":1},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[217]},"id":218,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":179,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":180,"nodeType":"StructuredDocumentation","src":"139:81:2","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":217,"linearizedBaseContracts":[217],"name":"Hashes","nameLocation":"229:6:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":203,"nodeType":"Block","src":"588:85:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":190,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"605:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":191,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"609:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":198,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"661:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":199,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"664:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":197,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"641:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:61:2","trueExpression":{"arguments":[{"id":194,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"633:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":195,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"636:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":193,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"613:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":189,"id":202,"nodeType":"Return","src":"598:68:2"}]},"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"242:257:2","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":204,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:2","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"a","nameLocation":"542:1:2","nodeType":"VariableDeclaration","scope":204,"src":"534:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"b","nameLocation":"553:1:2","nodeType":"VariableDeclaration","scope":204,"src":"545:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:2"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":204,"src":"579:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:2"},"scope":217,"src":"504:169:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":215,"nodeType":"Block","src":"881:151:2","statements":[{"AST":{"nativeSrc":"916:110:2","nodeType":"YulBlock","src":"916:110:2","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"937:4:2","nodeType":"YulLiteral","src":"937:4:2","type":"","value":"0x00"},{"name":"a","nativeSrc":"943:1:2","nodeType":"YulIdentifier","src":"943:1:2"}],"functionName":{"name":"mstore","nativeSrc":"930:6:2","nodeType":"YulIdentifier","src":"930:6:2"},"nativeSrc":"930:15:2","nodeType":"YulFunctionCall","src":"930:15:2"},"nativeSrc":"930:15:2","nodeType":"YulExpressionStatement","src":"930:15:2"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"965:4:2","nodeType":"YulLiteral","src":"965:4:2","type":"","value":"0x20"},{"name":"b","nativeSrc":"971:1:2","nodeType":"YulIdentifier","src":"971:1:2"}],"functionName":{"name":"mstore","nativeSrc":"958:6:2","nodeType":"YulIdentifier","src":"958:6:2"},"nativeSrc":"958:15:2","nodeType":"YulFunctionCall","src":"958:15:2"},"nativeSrc":"958:15:2","nodeType":"YulExpressionStatement","src":"958:15:2"},{"nativeSrc":"986:30:2","nodeType":"YulAssignment","src":"986:30:2","value":{"arguments":[{"kind":"number","nativeSrc":"1005:4:2","nodeType":"YulLiteral","src":"1005:4:2","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1011:4:2","nodeType":"YulLiteral","src":"1011:4:2","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"995:9:2","nodeType":"YulIdentifier","src":"995:9:2"},"nativeSrc":"995:21:2","nodeType":"YulFunctionCall","src":"995:21:2"},"variableNames":[{"name":"value","nativeSrc":"986:5:2","nodeType":"YulIdentifier","src":"986:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":207,"isOffset":false,"isSlot":false,"src":"943:1:2","valueSize":1},{"declaration":209,"isOffset":false,"isSlot":false,"src":"971:1:2","valueSize":1},{"declaration":212,"isOffset":false,"isSlot":false,"src":"986:5:2","valueSize":1}],"flags":["memory-safe"],"id":214,"nodeType":"InlineAssembly","src":"891:135:2"}]},"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"679:109:2","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":216,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientKeccak256","nameLocation":"802:19:2","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"a","nameLocation":"830:1:2","nodeType":"VariableDeclaration","scope":216,"src":"822:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":209,"mutability":"mutable","name":"b","nameLocation":"841:1:2","nodeType":"VariableDeclaration","scope":216,"src":"833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":208,"name":"bytes32","nodeType":"ElementaryTypeName","src":"833:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"821:22:2"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"value","nameLocation":"874:5:2","nodeType":"VariableDeclaration","scope":216,"src":"866:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"866:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"865:15:2"},"scope":217,"src":"793:239:2","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":218,"src":"221:813:2","usedErrors":[],"usedEvents":[]}],"src":"113:922:2"},"id":2},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[217],"MerkleProof":[1290]},"id":1291,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":219,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":221,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1291,"sourceUnit":218,"src":"232:36:3","symbolAliases":[{"foreign":{"id":220,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"240:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":222,"nodeType":"StructuredDocumentation","src":"270:1082:3","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":1290,"linearizedBaseContracts":[1290],"name":"MerkleProof","nameLocation":"1361:11:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"1379:60:3","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":225,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:3","nodeType":"ErrorDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"1478:2:3"},"src":"1444:37:3"},{"body":{"id":245,"nodeType":"Block","src":"1999:57:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":239,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2029:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":240,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2036:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":238,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[287,369],"referencedDeclaration":287,"src":"2016:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":242,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2045:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":237,"id":244,"nodeType":"Return","src":"2009:40:3"}]},"documentation":{"id":226,"nodeType":"StructuredDocumentation","src":"1487:410:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":246,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:3","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"proof","nameLocation":"1935:5:3","nodeType":"VariableDeclaration","scope":246,"src":"1918:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":228,"nodeType":"ArrayTypeName","src":"1918:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"root","nameLocation":"1950:4:3","nodeType":"VariableDeclaration","scope":246,"src":"1942:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:3","nodeType":"VariableDeclaration","scope":246,"src":"1956:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:3"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"1993:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":235,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:3"},"scope":1290,"src":"1902:154:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":286,"nodeType":"Block","src":"2549:216:3","statements":[{"assignments":[258],"declarations":[{"constant":false,"id":258,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:3","nodeType":"VariableDeclaration","scope":286,"src":"2559:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":260,"initialValue":{"id":259,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2582:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:3"},{"body":{"id":282,"nodeType":"Block","src":"2639:91:3","statements":[{"expression":{"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":272,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2653:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":275,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2696:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":276,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2710:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":278,"indexExpression":{"id":277,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2716:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":273,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2668:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"2668:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":281,"nodeType":"ExpressionStatement","src":"2653:66:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":265,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2616:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":266,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2620:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:3","memberName":"length","nodeType":"MemberAccess","src":"2620:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":283,"initializationExpression":{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"i","nameLocation":"2609:1:3","nodeType":"VariableDeclaration","scope":283,"src":"2601:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":264,"initialValue":{"hexValue":"30","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:3","subExpression":{"id":269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2634:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":271,"nodeType":"ExpressionStatement","src":"2634:3:3"},"nodeType":"ForStatement","src":"2596:134:3"},{"expression":{"id":284,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2746:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":256,"id":285,"nodeType":"Return","src":"2739:19:3"}]},"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"2062:390:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":287,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:3","nodeType":"FunctionDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"proof","nameLocation":"2496:5:3","nodeType":"VariableDeclaration","scope":287,"src":"2479:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":248,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":249,"nodeType":"ArrayTypeName","src":"2479:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:3","nodeType":"VariableDeclaration","scope":287,"src":"2503:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:3"},"returnParameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":287,"src":"2540:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:3"},"scope":1290,"src":"2457:308:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":318,"nodeType":"Block","src":"3376:65:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":311,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"3406:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":312,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3413:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":313,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3419:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":310,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[287,369],"referencedDeclaration":369,"src":"3393:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":315,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"3430:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":309,"id":317,"nodeType":"Return","src":"3386:48:3"}]},"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"2771:407:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":319,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:3","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"proof","nameLocation":"3225:5:3","nodeType":"VariableDeclaration","scope":319,"src":"3208:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":290,"nodeType":"ArrayTypeName","src":"3208:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":293,"mutability":"mutable","name":"root","nameLocation":"3248:4:3","nodeType":"VariableDeclaration","scope":319,"src":"3240:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:3","nodeType":"VariableDeclaration","scope":319,"src":"3262:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:3","nodeType":"VariableDeclaration","scope":319,"src":"3284:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":304,"nodeType":"FunctionTypeName","parameterTypes":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"3293:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"3302:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:3"},"returnParameterTypes":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"3325:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:3"},"src":"3284:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:3"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"3370:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":307,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:3"},"scope":1290,"src":"3183:258:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":368,"nodeType":"Block","src":"4019:195:3","statements":[{"assignments":[341],"declarations":[{"constant":false,"id":341,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:3","nodeType":"VariableDeclaration","scope":368,"src":"4029:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":343,"initialValue":{"id":342,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"4052:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:3"},{"body":{"id":364,"nodeType":"Block","src":"4109:70:3","statements":[{"expression":{"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":355,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4123:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":357,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4145:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":358,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"4159:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":360,"indexExpression":{"id":359,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"4165:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":356,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4138:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":363,"nodeType":"ExpressionStatement","src":"4123:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"4086:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":349,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"4090:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:3","memberName":"length","nodeType":"MemberAccess","src":"4090:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":365,"initializationExpression":{"assignments":[345],"declarations":[{"constant":false,"id":345,"mutability":"mutable","name":"i","nameLocation":"4079:1:3","nodeType":"VariableDeclaration","scope":365,"src":"4071:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":347,"initialValue":{"hexValue":"30","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:3","subExpression":{"id":352,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"4104:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":354,"nodeType":"ExpressionStatement","src":"4104:3:3"},"nodeType":"ForStatement","src":"4066:113:3"},{"expression":{"id":366,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4195:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":339,"id":367,"nodeType":"Return","src":"4188:19:3"}]},"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"3447:387:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":369,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:3","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"proof","nameLocation":"3887:5:3","nodeType":"VariableDeclaration","scope":369,"src":"3870:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":322,"nodeType":"ArrayTypeName","src":"3870:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":325,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:3","nodeType":"VariableDeclaration","scope":369,"src":"3902:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:3","nodeType":"VariableDeclaration","scope":369,"src":"3924:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":334,"nodeType":"FunctionTypeName","parameterTypes":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"3933:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"3942:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:3"},"returnParameterTypes":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"3965:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:3"},"src":"3924:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:3"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":369,"src":"4010:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:3"},"scope":1290,"src":"3839:375:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":389,"nodeType":"Block","src":"4744:65:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":383,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"4782:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":384,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"4789:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":382,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[431,513],"referencedDeclaration":431,"src":"4761:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":386,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4798:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":381,"id":388,"nodeType":"Return","src":"4754:48:3"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"4220:412:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":390,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:3","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"proof","nameLocation":"4680:5:3","nodeType":"VariableDeclaration","scope":390,"src":"4661:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":372,"nodeType":"ArrayTypeName","src":"4661:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"root","nameLocation":"4695:4:3","nodeType":"VariableDeclaration","scope":390,"src":"4687:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:3","nodeType":"VariableDeclaration","scope":390,"src":"4701:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:3"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":390,"src":"4738:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":379,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:3"},"scope":1290,"src":"4637:172:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":430,"nodeType":"Block","src":"5314:216:3","statements":[{"assignments":[402],"declarations":[{"constant":false,"id":402,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:3","nodeType":"VariableDeclaration","scope":430,"src":"5324:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":404,"initialValue":{"id":403,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"5347:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:3"},{"body":{"id":426,"nodeType":"Block","src":"5404:91:3","statements":[{"expression":{"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":416,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5418:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":419,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5461:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":420,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5475:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":422,"indexExpression":{"id":421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5481:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":417,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"5433:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"5433:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":425,"nodeType":"ExpressionStatement","src":"5418:66:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":409,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5381:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":410,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5385:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:3","memberName":"length","nodeType":"MemberAccess","src":"5385:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":427,"initializationExpression":{"assignments":[406],"declarations":[{"constant":false,"id":406,"mutability":"mutable","name":"i","nameLocation":"5374:1:3","nodeType":"VariableDeclaration","scope":427,"src":"5366:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":408,"initialValue":{"hexValue":"30","id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:3","subExpression":{"id":413,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5399:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":415,"nodeType":"ExpressionStatement","src":"5399:3:3"},"nodeType":"ForStatement","src":"5361:134:3"},{"expression":{"id":428,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5511:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":400,"id":429,"nodeType":"Return","src":"5504:19:3"}]},"documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"4815:392:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":431,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:3","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"proof","nameLocation":"5261:5:3","nodeType":"VariableDeclaration","scope":431,"src":"5242:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":393,"nodeType":"ArrayTypeName","src":"5242:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:3","nodeType":"VariableDeclaration","scope":431,"src":"5268:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:3"},"returnParameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":431,"src":"5305:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:3"},"scope":1290,"src":"5212:318:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":462,"nodeType":"Block","src":"6153:73:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":455,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6191:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":456,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6198:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":457,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"6204:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":454,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[431,513],"referencedDeclaration":513,"src":"6170:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":459,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"6215:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":453,"id":461,"nodeType":"Return","src":"6163:56:3"}]},"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"5536:409:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":463,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:3","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"proof","nameLocation":"6002:5:3","nodeType":"VariableDeclaration","scope":463,"src":"5983:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":434,"nodeType":"ArrayTypeName","src":"5983:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"root","nameLocation":"6025:4:3","nodeType":"VariableDeclaration","scope":463,"src":"6017:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:3","nodeType":"VariableDeclaration","scope":463,"src":"6039:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:3","nodeType":"VariableDeclaration","scope":463,"src":"6061:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":448,"nodeType":"FunctionTypeName","parameterTypes":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"6070:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"6079:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:3"},"returnParameterTypes":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"6102:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:3"},"src":"6061:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:3"},"returnParameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"6147:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":451,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:3"},"scope":1290,"src":"5950:276:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":512,"nodeType":"Block","src":"6816:195:3","statements":[{"assignments":[485],"declarations":[{"constant":false,"id":485,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:3","nodeType":"VariableDeclaration","scope":512,"src":"6826:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":487,"initialValue":{"id":486,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"6849:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:3"},{"body":{"id":508,"nodeType":"Block","src":"6906:70:3","statements":[{"expression":{"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":499,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6920:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":501,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6942:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":502,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"6956:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":504,"indexExpression":{"id":503,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6962:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":500,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"6935:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":507,"nodeType":"ExpressionStatement","src":"6920:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":492,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6883:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":493,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"6887:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:3","memberName":"length","nodeType":"MemberAccess","src":"6887:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"initializationExpression":{"assignments":[489],"declarations":[{"constant":false,"id":489,"mutability":"mutable","name":"i","nameLocation":"6876:1:3","nodeType":"VariableDeclaration","scope":509,"src":"6868:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":491,"initialValue":{"hexValue":"30","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:3","subExpression":{"id":496,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6901:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":498,"nodeType":"ExpressionStatement","src":"6901:3:3"},"nodeType":"ForStatement","src":"6863:113:3"},{"expression":{"id":510,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6992:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":483,"id":511,"nodeType":"Return","src":"6985:19:3"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"6232:389:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":513,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:3","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"proof","nameLocation":"6684:5:3","nodeType":"VariableDeclaration","scope":513,"src":"6665:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":466,"nodeType":"ArrayTypeName","src":"6665:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":469,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:3","nodeType":"VariableDeclaration","scope":513,"src":"6699:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:3","nodeType":"VariableDeclaration","scope":513,"src":"6721:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":478,"nodeType":"FunctionTypeName","parameterTypes":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"6730:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"6739:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:3"},"returnParameterTypes":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"6762:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:3"},"src":"6721:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:3"},"returnParameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":513,"src":"6807:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:3"},"scope":1290,"src":"6626:385:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":538,"nodeType":"Block","src":"7797:76:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":531,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"7832:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":532,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"7839:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":533,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"7851:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":530,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[697,901],"referencedDeclaration":697,"src":"7814:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":535,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"7862:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":529,"id":537,"nodeType":"Return","src":"7807:59:3"}]},"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"7017:593:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":539,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:3","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"proof","nameLocation":"7667:5:3","nodeType":"VariableDeclaration","scope":539,"src":"7650:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":516,"nodeType":"ArrayTypeName","src":"7650:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:3","nodeType":"VariableDeclaration","scope":539,"src":"7682:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":518,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":519,"nodeType":"ArrayTypeName","src":"7682:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"root","nameLocation":"7724:4:3","nodeType":"VariableDeclaration","scope":539,"src":"7716:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:3","nodeType":"VariableDeclaration","scope":539,"src":"7738:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":524,"nodeType":"ArrayTypeName","src":"7738:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:3"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":539,"src":"7791:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":527,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:3"},"scope":1290,"src":"7615:258:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":696,"nodeType":"Block","src":"9159:2104:3","statements":[{"assignments":[555],"declarations":[{"constant":false,"id":555,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:3","nodeType":"VariableDeclaration","scope":696,"src":"9543:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":554,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":558,"initialValue":{"expression":{"id":556,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"9563:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:3","memberName":"length","nodeType":"MemberAccess","src":"9563:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:3"},{"assignments":[560],"declarations":[{"constant":false,"id":560,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:3","nodeType":"VariableDeclaration","scope":696,"src":"9586:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":563,"initialValue":{"expression":{"id":561,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"9610:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:3","memberName":"length","nodeType":"MemberAccess","src":"9610:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":564,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"9675:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":565,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"9687:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:3","memberName":"length","nodeType":"MemberAccess","src":"9687:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":568,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"9703:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":576,"nodeType":"IfStatement","src":"9671:113:3","trueBody":{"id":575,"nodeType":"Block","src":"9722:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":572,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"9743:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":574,"nodeType":"RevertStatement","src":"9736:37:3"}]}},{"assignments":[581],"declarations":[{"constant":false,"id":581,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:3","nodeType":"VariableDeclaration","scope":696,"src":"10028:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":580,"nodeType":"ArrayTypeName","src":"10028:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":587,"initialValue":{"arguments":[{"id":585,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10068:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":583,"nodeType":"ArrayTypeName","src":"10058:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:3"},{"assignments":[589],"declarations":[{"constant":false,"id":589,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:3","nodeType":"VariableDeclaration","scope":696,"src":"10092:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":591,"initialValue":{"hexValue":"30","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:3"},{"assignments":[593],"declarations":[{"constant":false,"id":593,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:3","nodeType":"VariableDeclaration","scope":696,"src":"10121:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":595,"initialValue":{"hexValue":"30","id":594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:3"},{"assignments":[597],"declarations":[{"constant":false,"id":597,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:3","nodeType":"VariableDeclaration","scope":696,"src":"10150:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":599,"initialValue":{"hexValue":"30","id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:3"},{"body":{"id":659,"nodeType":"Block","src":"10590:310:3","statements":[{"assignments":[611],"declarations":[{"constant":false,"id":611,"mutability":"mutable","name":"a","nameLocation":"10612:1:3","nodeType":"VariableDeclaration","scope":659,"src":"10604:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":624,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":612,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10616:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":613,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"10626:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":619,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"10658:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":622,"indexExpression":{"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:3","subExpression":{"id":620,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10665:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:3","trueExpression":{"baseExpression":{"id":615,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"10638:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":618,"indexExpression":{"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:3","subExpression":{"id":616,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10645:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:3"},{"assignments":[626],"declarations":[{"constant":false,"id":626,"mutability":"mutable","name":"b","nameLocation":"10697:1:3","nodeType":"VariableDeclaration","scope":659,"src":"10689:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":648,"initialValue":{"condition":{"baseExpression":{"id":627,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"10701:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":629,"indexExpression":{"id":628,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10712:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":643,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"10813:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":646,"indexExpression":{"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:3","subExpression":{"id":644,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"10819:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":630,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10734:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":631,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"10744:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":637,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"10776:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":640,"indexExpression":{"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:3","subExpression":{"id":638,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10783:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:3","trueExpression":{"baseExpression":{"id":633,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"10756:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":636,"indexExpression":{"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:3","subExpression":{"id":634,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10763:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":642,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:3"},{"expression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":649,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"10844:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":651,"indexExpression":{"id":650,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10851:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":654,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"10884:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":655,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"10887:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":652,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"10856:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"10856:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":658,"nodeType":"ExpressionStatement","src":"10844:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10566:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":605,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10570:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":660,"initializationExpression":{"assignments":[601],"declarations":[{"constant":false,"id":601,"mutability":"mutable","name":"i","nameLocation":"10559:1:3","nodeType":"VariableDeclaration","scope":660,"src":"10551:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":600,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":603,"initialValue":{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:3","subExpression":{"id":607,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10585:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":609,"nodeType":"ExpressionStatement","src":"10585:3:3"},"nodeType":"ForStatement","src":"10546:354:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":661,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10914:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":681,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"11155:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":693,"nodeType":"Block","src":"11217:40:3","statements":[{"expression":{"baseExpression":{"id":689,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"11238:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":691,"indexExpression":{"hexValue":"30","id":690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":553,"id":692,"nodeType":"Return","src":"11231:15:3"}]},"id":694,"nodeType":"IfStatement","src":"11151:106:3","trueBody":{"id":688,"nodeType":"Block","src":"11170:41:3","statements":[{"expression":{"baseExpression":{"id":684,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"11191:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":686,"indexExpression":{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":553,"id":687,"nodeType":"Return","src":"11184:16:3"}]}},"id":695,"nodeType":"IfStatement","src":"10910:347:3","trueBody":{"id":680,"nodeType":"Block","src":"10933:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":664,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"10951:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":665,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"10963:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:3","memberName":"length","nodeType":"MemberAccess","src":"10963:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":672,"nodeType":"IfStatement","src":"10947:100:3","trueBody":{"id":671,"nodeType":"Block","src":"10977:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":668,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"11002:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":670,"nodeType":"RevertStatement","src":"10995:37:3"}]}},{"id":679,"nodeType":"UncheckedBlock","src":"11060:75:3","statements":[{"expression":{"baseExpression":{"id":673,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11095:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":677,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":674,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"11102:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":553,"id":678,"nodeType":"Return","src":"11088:32:3"}]}]}}]},"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"7879:1100:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":697,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:3","nodeType":"FunctionDefinition","parameters":{"id":550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"proof","nameLocation":"9037:5:3","nodeType":"VariableDeclaration","scope":697,"src":"9020:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":542,"nodeType":"ArrayTypeName","src":"9020:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:3","nodeType":"VariableDeclaration","scope":697,"src":"9052:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":544,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":545,"nodeType":"ArrayTypeName","src":"9052:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":549,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:3","nodeType":"VariableDeclaration","scope":697,"src":"9086:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":548,"nodeType":"ArrayTypeName","src":"9086:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:3"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:3","nodeType":"VariableDeclaration","scope":697,"src":"9139:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:3"},"scope":1290,"src":"8984:2279:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":733,"nodeType":"Block","src":"12112:84:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":725,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"12147:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":726,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"12154:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":727,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"12166:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":728,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"12174:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":724,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[697,901],"referencedDeclaration":901,"src":"12129:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":730,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"12185:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":723,"id":732,"nodeType":"Return","src":"12122:67:3"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"11269:590:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":734,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:3","nodeType":"FunctionDefinition","parameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"proof","nameLocation":"11916:5:3","nodeType":"VariableDeclaration","scope":734,"src":"11899:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":700,"nodeType":"ArrayTypeName","src":"11899:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:3","nodeType":"VariableDeclaration","scope":734,"src":"11931:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":702,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":703,"nodeType":"ArrayTypeName","src":"11931:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"root","nameLocation":"11973:4:3","nodeType":"VariableDeclaration","scope":734,"src":"11965:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:3","nodeType":"VariableDeclaration","scope":734,"src":"11987:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":708,"nodeType":"ArrayTypeName","src":"11987:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":719,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:3","nodeType":"VariableDeclaration","scope":734,"src":"12020:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":718,"nodeType":"FunctionTypeName","parameterTypes":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"12029:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"12038:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:3"},"returnParameterTypes":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"12061:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:3"},"src":"12020:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:3"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":734,"src":"12106:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":721,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:3"},"scope":1290,"src":"11864:332:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":900,"nodeType":"Block","src":"13545:2083:3","statements":[{"assignments":[760],"declarations":[{"constant":false,"id":760,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:3","nodeType":"VariableDeclaration","scope":900,"src":"13929:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":763,"initialValue":{"expression":{"id":761,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"13949:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:3","memberName":"length","nodeType":"MemberAccess","src":"13949:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:3"},{"assignments":[765],"declarations":[{"constant":false,"id":765,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:3","nodeType":"VariableDeclaration","scope":900,"src":"13972:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":768,"initialValue":{"expression":{"id":766,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"13996:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:3","memberName":"length","nodeType":"MemberAccess","src":"13996:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":769,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"14061:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":770,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"14073:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:3","memberName":"length","nodeType":"MemberAccess","src":"14073:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":773,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"14089:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":781,"nodeType":"IfStatement","src":"14057:113:3","trueBody":{"id":780,"nodeType":"Block","src":"14108:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":777,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"14129:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":779,"nodeType":"RevertStatement","src":"14122:37:3"}]}},{"assignments":[786],"declarations":[{"constant":false,"id":786,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:3","nodeType":"VariableDeclaration","scope":900,"src":"14414:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":785,"nodeType":"ArrayTypeName","src":"14414:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":792,"initialValue":{"arguments":[{"id":790,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"14454:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":788,"nodeType":"ArrayTypeName","src":"14444:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:3"},{"assignments":[794],"declarations":[{"constant":false,"id":794,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:3","nodeType":"VariableDeclaration","scope":900,"src":"14478:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":793,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":796,"initialValue":{"hexValue":"30","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:3"},{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:3","nodeType":"VariableDeclaration","scope":900,"src":"14507:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":800,"initialValue":{"hexValue":"30","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:3"},{"assignments":[802],"declarations":[{"constant":false,"id":802,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:3","nodeType":"VariableDeclaration","scope":900,"src":"14536:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":801,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":804,"initialValue":{"hexValue":"30","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:3"},{"body":{"id":863,"nodeType":"Block","src":"14976:289:3","statements":[{"assignments":[816],"declarations":[{"constant":false,"id":816,"mutability":"mutable","name":"a","nameLocation":"14998:1:3","nodeType":"VariableDeclaration","scope":863,"src":"14990:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":829,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":817,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15002:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":818,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15012:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":824,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15044:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":827,"indexExpression":{"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:3","subExpression":{"id":825,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"15051:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:3","trueExpression":{"baseExpression":{"id":820,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"15024:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":823,"indexExpression":{"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:3","subExpression":{"id":821,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15031:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:3"},{"assignments":[831],"declarations":[{"constant":false,"id":831,"mutability":"mutable","name":"b","nameLocation":"15083:1:3","nodeType":"VariableDeclaration","scope":863,"src":"15075:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":853,"initialValue":{"condition":{"baseExpression":{"id":832,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"15087:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":834,"indexExpression":{"id":833,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"15098:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":848,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"15199:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":851,"indexExpression":{"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:3","subExpression":{"id":849,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"15205:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":835,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15120:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":836,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15130:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":842,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15162:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":845,"indexExpression":{"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:3","subExpression":{"id":843,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"15169:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:3","trueExpression":{"baseExpression":{"id":838,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"15142:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":841,"indexExpression":{"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:3","subExpression":{"id":839,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15149:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":847,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:3"},{"expression":{"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":854,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15230:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":856,"indexExpression":{"id":855,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"15237:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":858,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"15249:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":859,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"15252:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":857,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"15242:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":862,"nodeType":"ExpressionStatement","src":"15230:24:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":809,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"14952:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":810,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"14956:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":864,"initializationExpression":{"assignments":[806],"declarations":[{"constant":false,"id":806,"mutability":"mutable","name":"i","nameLocation":"14945:1:3","nodeType":"VariableDeclaration","scope":864,"src":"14937:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":808,"initialValue":{"hexValue":"30","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:3","subExpression":{"id":812,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"14971:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":814,"nodeType":"ExpressionStatement","src":"14971:3:3"},"nodeType":"ForStatement","src":"14932:333:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":865,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"15279:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":885,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15520:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":897,"nodeType":"Block","src":"15582:40:3","statements":[{"expression":{"baseExpression":{"id":893,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"15603:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":895,"indexExpression":{"hexValue":"30","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":758,"id":896,"nodeType":"Return","src":"15596:15:3"}]},"id":898,"nodeType":"IfStatement","src":"15516:106:3","trueBody":{"id":892,"nodeType":"Block","src":"15535:41:3","statements":[{"expression":{"baseExpression":{"id":888,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"15556:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":890,"indexExpression":{"hexValue":"30","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":758,"id":891,"nodeType":"Return","src":"15549:16:3"}]}},"id":899,"nodeType":"IfStatement","src":"15275:347:3","trueBody":{"id":884,"nodeType":"Block","src":"15298:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":868,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"15316:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":869,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"15328:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:3","memberName":"length","nodeType":"MemberAccess","src":"15328:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":876,"nodeType":"IfStatement","src":"15312:100:3","trueBody":{"id":875,"nodeType":"Block","src":"15342:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":872,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"15367:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":874,"nodeType":"RevertStatement","src":"15360:37:3"}]}},{"id":883,"nodeType":"UncheckedBlock","src":"15425:75:3","statements":[{"expression":{"baseExpression":{"id":877,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15460:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":881,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":878,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"15467:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":758,"id":882,"nodeType":"Return","src":"15453:32:3"}]}]}}]},"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"12202:1097:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":901,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:3","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"proof","nameLocation":"13357:5:3","nodeType":"VariableDeclaration","scope":901,"src":"13340:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":737,"nodeType":"ArrayTypeName","src":"13340:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:3","nodeType":"VariableDeclaration","scope":901,"src":"13372:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":739,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":740,"nodeType":"ArrayTypeName","src":"13372:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:3","nodeType":"VariableDeclaration","scope":901,"src":"13406:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":743,"nodeType":"ArrayTypeName","src":"13406:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:3","nodeType":"VariableDeclaration","scope":901,"src":"13439:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":753,"nodeType":"FunctionTypeName","parameterTypes":{"id":749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"13448:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"13457:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:3"},"returnParameterTypes":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"13480:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:3"},"src":"13439:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:3"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:3","nodeType":"VariableDeclaration","scope":901,"src":"13525:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":756,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:3"},"scope":1290,"src":"13304:2324:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":926,"nodeType":"Block","src":"16436:84:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":919,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"16479:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":920,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"16486:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":921,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"16498:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":918,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1085,1289],"referencedDeclaration":1085,"src":"16453:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":923,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"16509:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":917,"id":925,"nodeType":"Return","src":"16446:67:3"}]},"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"15634:603:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":927,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:3","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"proof","nameLocation":"16304:5:3","nodeType":"VariableDeclaration","scope":927,"src":"16285:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":903,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":904,"nodeType":"ArrayTypeName","src":"16285:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:3","nodeType":"VariableDeclaration","scope":927,"src":"16319:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":906,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":907,"nodeType":"ArrayTypeName","src":"16319:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":910,"mutability":"mutable","name":"root","nameLocation":"16363:4:3","nodeType":"VariableDeclaration","scope":927,"src":"16355:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":909,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:3","nodeType":"VariableDeclaration","scope":927,"src":"16377:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":912,"nodeType":"ArrayTypeName","src":"16377:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:3"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":927,"src":"16430:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":915,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:3"},"scope":1290,"src":"16242:278:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1084,"nodeType":"Block","src":"17820:2104:3","statements":[{"assignments":[943],"declarations":[{"constant":false,"id":943,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:3","nodeType":"VariableDeclaration","scope":1084,"src":"18204:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":946,"initialValue":{"expression":{"id":944,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"18224:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:3","memberName":"length","nodeType":"MemberAccess","src":"18224:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:3"},{"assignments":[948],"declarations":[{"constant":false,"id":948,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:3","nodeType":"VariableDeclaration","scope":1084,"src":"18247:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":951,"initialValue":{"expression":{"id":949,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"18271:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:3","memberName":"length","nodeType":"MemberAccess","src":"18271:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":952,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"18336:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":953,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"18348:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:3","memberName":"length","nodeType":"MemberAccess","src":"18348:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":956,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"18364:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":964,"nodeType":"IfStatement","src":"18332:113:3","trueBody":{"id":963,"nodeType":"Block","src":"18383:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":960,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"18404:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":962,"nodeType":"RevertStatement","src":"18397:37:3"}]}},{"assignments":[969],"declarations":[{"constant":false,"id":969,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:3","nodeType":"VariableDeclaration","scope":1084,"src":"18689:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":968,"nodeType":"ArrayTypeName","src":"18689:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":975,"initialValue":{"arguments":[{"id":973,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"18729:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":970,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":971,"nodeType":"ArrayTypeName","src":"18719:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:3"},{"assignments":[977],"declarations":[{"constant":false,"id":977,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:3","nodeType":"VariableDeclaration","scope":1084,"src":"18753:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":979,"initialValue":{"hexValue":"30","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:3"},{"assignments":[981],"declarations":[{"constant":false,"id":981,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:3","nodeType":"VariableDeclaration","scope":1084,"src":"18782:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":983,"initialValue":{"hexValue":"30","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:3"},{"assignments":[985],"declarations":[{"constant":false,"id":985,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:3","nodeType":"VariableDeclaration","scope":1084,"src":"18811:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":987,"initialValue":{"hexValue":"30","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:3"},{"body":{"id":1047,"nodeType":"Block","src":"19251:310:3","statements":[{"assignments":[999],"declarations":[{"constant":false,"id":999,"mutability":"mutable","name":"a","nameLocation":"19273:1:3","nodeType":"VariableDeclaration","scope":1047,"src":"19265:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1012,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1000,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19277:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1001,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"19287:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1007,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19319:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1010,"indexExpression":{"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:3","subExpression":{"id":1008,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"19326:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:3","trueExpression":{"baseExpression":{"id":1003,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19299:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1006,"indexExpression":{"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:3","subExpression":{"id":1004,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19306:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:3"},{"assignments":[1014],"declarations":[{"constant":false,"id":1014,"mutability":"mutable","name":"b","nameLocation":"19358:1:3","nodeType":"VariableDeclaration","scope":1047,"src":"19350:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1036,"initialValue":{"condition":{"baseExpression":{"id":1015,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"19362:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1017,"indexExpression":{"id":1016,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19373:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1031,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"19474:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1034,"indexExpression":{"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:3","subExpression":{"id":1032,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"19480:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1018,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19395:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1019,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"19405:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1025,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19437:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1028,"indexExpression":{"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:3","subExpression":{"id":1026,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"19444:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:3","trueExpression":{"baseExpression":{"id":1021,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19417:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1024,"indexExpression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:3","subExpression":{"id":1022,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19424:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1030,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:3"},{"expression":{"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1037,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19505:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1039,"indexExpression":{"id":1038,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19512:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1042,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"19545:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1043,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"19548:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1040,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"19517:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"19517:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1046,"nodeType":"ExpressionStatement","src":"19505:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":992,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19227:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":993,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"19231:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1048,"initializationExpression":{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"i","nameLocation":"19220:1:3","nodeType":"VariableDeclaration","scope":1048,"src":"19212:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":991,"initialValue":{"hexValue":"30","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:3","subExpression":{"id":995,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19246:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":997,"nodeType":"ExpressionStatement","src":"19246:3:3"},"nodeType":"ForStatement","src":"19207:354:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"19575:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1069,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"19816:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1081,"nodeType":"Block","src":"19878:40:3","statements":[{"expression":{"baseExpression":{"id":1077,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"19899:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1079,"indexExpression":{"hexValue":"30","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":941,"id":1080,"nodeType":"Return","src":"19892:15:3"}]},"id":1082,"nodeType":"IfStatement","src":"19812:106:3","trueBody":{"id":1076,"nodeType":"Block","src":"19831:41:3","statements":[{"expression":{"baseExpression":{"id":1072,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19852:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1074,"indexExpression":{"hexValue":"30","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":941,"id":1075,"nodeType":"Return","src":"19845:16:3"}]}},"id":1083,"nodeType":"IfStatement","src":"19571:347:3","trueBody":{"id":1068,"nodeType":"Block","src":"19594:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1052,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"19612:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1053,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"19624:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:3","memberName":"length","nodeType":"MemberAccess","src":"19624:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1060,"nodeType":"IfStatement","src":"19608:100:3","trueBody":{"id":1059,"nodeType":"Block","src":"19638:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1056,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"19663:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1058,"nodeType":"RevertStatement","src":"19656:37:3"}]}},{"id":1067,"nodeType":"UncheckedBlock","src":"19721:75:3","statements":[{"expression":{"baseExpression":{"id":1061,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19756:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1065,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"19763:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":941,"id":1066,"nodeType":"Return","src":"19749:32:3"}]}]}}]},"documentation":{"id":928,"nodeType":"StructuredDocumentation","src":"16526:1102:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1085,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:3","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"proof","nameLocation":"17696:5:3","nodeType":"VariableDeclaration","scope":1085,"src":"17677:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":929,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":930,"nodeType":"ArrayTypeName","src":"17677:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:3","nodeType":"VariableDeclaration","scope":1085,"src":"17711:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":932,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":933,"nodeType":"ArrayTypeName","src":"17711:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:3","nodeType":"VariableDeclaration","scope":1085,"src":"17747:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":936,"nodeType":"ArrayTypeName","src":"17747:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:3"},"returnParameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:3","nodeType":"VariableDeclaration","scope":1085,"src":"17800:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:3"},"scope":1290,"src":"17633:2291:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1121,"nodeType":"Block","src":"20795:92:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1113,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"20838:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1114,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"20845:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1115,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"20857:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1116,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"20865:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1112,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1085,1289],"referencedDeclaration":1289,"src":"20812:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1118,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"20876:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1111,"id":1120,"nodeType":"Return","src":"20805:75:3"}]},"documentation":{"id":1086,"nodeType":"StructuredDocumentation","src":"19930:600:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1122,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:3","nodeType":"FunctionDefinition","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"proof","nameLocation":"20597:5:3","nodeType":"VariableDeclaration","scope":1122,"src":"20578:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1087,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1088,"nodeType":"ArrayTypeName","src":"20578:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1092,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:3","nodeType":"VariableDeclaration","scope":1122,"src":"20612:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1090,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"nodeType":"ArrayTypeName","src":"20612:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"root","nameLocation":"20656:4:3","nodeType":"VariableDeclaration","scope":1122,"src":"20648:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:3","nodeType":"VariableDeclaration","scope":1122,"src":"20670:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1095,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1096,"nodeType":"ArrayTypeName","src":"20670:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:3","nodeType":"VariableDeclaration","scope":1122,"src":"20703:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1106,"nodeType":"FunctionTypeName","parameterTypes":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"20712:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"20721:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:3"},"returnParameterTypes":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"20744:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:3"},"src":"20703:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:3"},"returnParameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1122,"src":"20789:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1109,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:3"},"scope":1290,"src":"20535:352:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1288,"nodeType":"Block","src":"22250:2083:3","statements":[{"assignments":[1148],"declarations":[{"constant":false,"id":1148,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:3","nodeType":"VariableDeclaration","scope":1288,"src":"22634:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1151,"initialValue":{"expression":{"id":1149,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"22654:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:3","memberName":"length","nodeType":"MemberAccess","src":"22654:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:3"},{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:3","nodeType":"VariableDeclaration","scope":1288,"src":"22677:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1156,"initialValue":{"expression":{"id":1154,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"22701:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:3","memberName":"length","nodeType":"MemberAccess","src":"22701:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1157,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"22766:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1158,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"22778:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:3","memberName":"length","nodeType":"MemberAccess","src":"22778:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1161,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"22794:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1169,"nodeType":"IfStatement","src":"22762:113:3","trueBody":{"id":1168,"nodeType":"Block","src":"22813:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1165,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"22834:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1167,"nodeType":"RevertStatement","src":"22827:37:3"}]}},{"assignments":[1174],"declarations":[{"constant":false,"id":1174,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:3","nodeType":"VariableDeclaration","scope":1288,"src":"23119:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1173,"nodeType":"ArrayTypeName","src":"23119:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1180,"initialValue":{"arguments":[{"id":1178,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"23159:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1176,"nodeType":"ArrayTypeName","src":"23149:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:3"},{"assignments":[1182],"declarations":[{"constant":false,"id":1182,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:3","nodeType":"VariableDeclaration","scope":1288,"src":"23183:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1184,"initialValue":{"hexValue":"30","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:3"},{"assignments":[1186],"declarations":[{"constant":false,"id":1186,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:3","nodeType":"VariableDeclaration","scope":1288,"src":"23212:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1188,"initialValue":{"hexValue":"30","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:3"},{"assignments":[1190],"declarations":[{"constant":false,"id":1190,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:3","nodeType":"VariableDeclaration","scope":1288,"src":"23241:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1192,"initialValue":{"hexValue":"30","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:3"},{"body":{"id":1251,"nodeType":"Block","src":"23681:289:3","statements":[{"assignments":[1204],"declarations":[{"constant":false,"id":1204,"mutability":"mutable","name":"a","nameLocation":"23703:1:3","nodeType":"VariableDeclaration","scope":1251,"src":"23695:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1217,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1205,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23707:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1206,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"23717:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1212,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"23749:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1215,"indexExpression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:3","subExpression":{"id":1213,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"23756:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:3","trueExpression":{"baseExpression":{"id":1208,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"23729:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1211,"indexExpression":{"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:3","subExpression":{"id":1209,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:3"},{"assignments":[1219],"declarations":[{"constant":false,"id":1219,"mutability":"mutable","name":"b","nameLocation":"23788:1:3","nodeType":"VariableDeclaration","scope":1251,"src":"23780:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1241,"initialValue":{"condition":{"baseExpression":{"id":1220,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"23792:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1222,"indexExpression":{"id":1221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23803:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1236,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"23904:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1239,"indexExpression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:3","subExpression":{"id":1237,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23910:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1223,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23825:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1224,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"23835:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1230,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"23867:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1233,"indexExpression":{"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:3","subExpression":{"id":1231,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"23874:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:3","trueExpression":{"baseExpression":{"id":1226,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"23847:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1229,"indexExpression":{"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:3","subExpression":{"id":1227,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23854:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:3"},{"expression":{"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1242,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"23935:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1244,"indexExpression":{"id":1243,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23942:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1246,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"23954:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"23957:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1245,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"23947:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1250,"nodeType":"ExpressionStatement","src":"23935:24:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1197,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23657:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1198,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"23661:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1252,"initializationExpression":{"assignments":[1194],"declarations":[{"constant":false,"id":1194,"mutability":"mutable","name":"i","nameLocation":"23650:1:3","nodeType":"VariableDeclaration","scope":1252,"src":"23642:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1196,"initialValue":{"hexValue":"30","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:3","subExpression":{"id":1200,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23676:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1202,"nodeType":"ExpressionStatement","src":"23676:3:3"},"nodeType":"ForStatement","src":"23637:333:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1253,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"23984:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"24225:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1285,"nodeType":"Block","src":"24287:40:3","statements":[{"expression":{"baseExpression":{"id":1281,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"24308:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1283,"indexExpression":{"hexValue":"30","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1146,"id":1284,"nodeType":"Return","src":"24301:15:3"}]},"id":1286,"nodeType":"IfStatement","src":"24221:106:3","trueBody":{"id":1280,"nodeType":"Block","src":"24240:41:3","statements":[{"expression":{"baseExpression":{"id":1276,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"24261:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1278,"indexExpression":{"hexValue":"30","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1146,"id":1279,"nodeType":"Return","src":"24254:16:3"}]}},"id":1287,"nodeType":"IfStatement","src":"23980:347:3","trueBody":{"id":1272,"nodeType":"Block","src":"24003:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1256,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"24021:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1257,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"24033:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:3","memberName":"length","nodeType":"MemberAccess","src":"24033:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1264,"nodeType":"IfStatement","src":"24017:100:3","trueBody":{"id":1263,"nodeType":"Block","src":"24047:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1260,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"24072:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1262,"nodeType":"RevertStatement","src":"24065:37:3"}]}},{"id":1271,"nodeType":"UncheckedBlock","src":"24130:75:3","statements":[{"expression":{"baseExpression":{"id":1265,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"24165:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1269,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"24172:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1146,"id":1270,"nodeType":"Return","src":"24158:32:3"}]}]}}]},"documentation":{"id":1123,"nodeType":"StructuredDocumentation","src":"20893:1099:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1289,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:3","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"proof","nameLocation":"22060:5:3","nodeType":"VariableDeclaration","scope":1289,"src":"22041:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1125,"nodeType":"ArrayTypeName","src":"22041:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:3","nodeType":"VariableDeclaration","scope":1289,"src":"22075:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1127,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1128,"nodeType":"ArrayTypeName","src":"22075:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:3","nodeType":"VariableDeclaration","scope":1289,"src":"22111:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1131,"nodeType":"ArrayTypeName","src":"22111:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:3","nodeType":"VariableDeclaration","scope":1289,"src":"22144:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1141,"nodeType":"FunctionTypeName","parameterTypes":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"22153:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"22162:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:3"},"returnParameterTypes":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"22185:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:3"},"src":"22144:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:3"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:3","nodeType":"VariableDeclaration","scope":1289,"src":"22230:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:3"},"scope":1290,"src":"21997:2336:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1291,"src":"1353:22982:3","usedErrors":[225],"usedEvents":[]}],"src":"206:24130:3"},"id":3},"contracts/Lock.sol":{"ast":{"absolutePath":"contracts/Lock.sol","exportedSymbols":{"Lock":[1369]},"id":1370,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1292,"literals":["solidity","^","0.8",".27"],"nodeType":"PragmaDirective","src":"39:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Lock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1369,"linearizedBaseContracts":[1369],"name":"Lock","nameLocation":"150:4:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"251c1aa3","id":1294,"mutability":"mutable","name":"unlockTime","nameLocation":"173:10:4","nodeType":"VariableDeclaration","scope":1369,"src":"161:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint","nodeType":"ElementaryTypeName","src":"161:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"8da5cb5b","id":1296,"mutability":"mutable","name":"owner","nameLocation":"212:5:4","nodeType":"VariableDeclaration","scope":1369,"src":"189:28:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1295,"name":"address","nodeType":"ElementaryTypeName","src":"189:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"public"},{"anonymous":false,"eventSelector":"bf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93","id":1302,"name":"Withdrawal","nameLocation":"230:10:4","nodeType":"EventDefinition","parameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"246:6:4","nodeType":"VariableDeclaration","scope":1302,"src":"241:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1297,"name":"uint","nodeType":"ElementaryTypeName","src":"241:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1300,"indexed":false,"mutability":"mutable","name":"when","nameLocation":"259:4:4","nodeType":"VariableDeclaration","scope":1302,"src":"254:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint","nodeType":"ElementaryTypeName","src":"254:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"240:24:4"},"src":"224:41:4"},{"body":{"id":1327,"nodeType":"Block","src":"309:200:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1308,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"340:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"346:9:4","memberName":"timestamp","nodeType":"MemberAccess","src":"340:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1310,"name":"_unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"358:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"340:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e6c6f636b2074696d652073686f756c6420626520696e2074686520667574757265","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:37:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413","typeString":"literal_string \"Unlock time should be in the future\""},"value":"Unlock time should be in the future"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413","typeString":"literal_string \"Unlock time should be in the future\""}],"id":1307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"319:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"319:111:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1314,"nodeType":"ExpressionStatement","src":"319:111:4"},{"expression":{"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1315,"name":"unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"441:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1316,"name":"_unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"454:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"441:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1318,"nodeType":"ExpressionStatement","src":"441:24:4"},{"expression":{"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1319,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"475:5:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":1322,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"491:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"495:6:4","memberName":"sender","nodeType":"MemberAccess","src":"491:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"483:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"483:8:4","stateMutability":"payable","typeDescriptions":{}}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"483:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"475:27:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1326,"nodeType":"ExpressionStatement","src":"475:27:4"}]},"id":1328,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"_unlockTime","nameLocation":"288:11:4","nodeType":"VariableDeclaration","scope":1328,"src":"283:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1303,"name":"uint","nodeType":"ElementaryTypeName","src":"283:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"282:18:4"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"309:0:4"},"scope":1369,"src":"271:238:4","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":1367,"nodeType":"Block","src":"542:463:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1332,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"766:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"772:9:4","memberName":"timestamp","nodeType":"MemberAccess","src":"766:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1334,"name":"unlockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"785:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"766:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752063616e277420776974686472617720796574","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"797:24:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8","typeString":"literal_string \"You can't withdraw yet\""},"value":"You can't withdraw yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8","typeString":"literal_string \"You can't withdraw yet\""}],"id":1331,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"758:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"758:64:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1338,"nodeType":"ExpressionStatement","src":"758:64:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1340,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"840:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"844:6:4","memberName":"sender","nodeType":"MemberAccess","src":"840:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1342,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"854:5:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"840:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75206172656e277420746865206f776e6572","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"861:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a","typeString":"literal_string \"You aren't the owner\""},"value":"You aren't the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a","typeString":"literal_string \"You aren't the owner\""}],"id":1339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"832:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"832:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1346,"nodeType":"ExpressionStatement","src":"832:52:4"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":1350,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"919:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Lock_$1369","typeString":"contract Lock"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lock_$1369","typeString":"contract Lock"}],"id":1349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"911:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:4","typeDescriptions":{}}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"911:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"925:7:4","memberName":"balance","nodeType":"MemberAccess","src":"911:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1353,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"934:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:9:4","memberName":"timestamp","nodeType":"MemberAccess","src":"934:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1347,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"900:10:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"900:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1356,"nodeType":"EmitStatement","src":"895:55:4"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":1362,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"984:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Lock_$1369","typeString":"contract Lock"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Lock_$1369","typeString":"contract Lock"}],"id":1361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"976:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:4","typeDescriptions":{}}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"976:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"990:7:4","memberName":"balance","nodeType":"MemberAccess","src":"976:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1357,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"961:5:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"967:8:4","memberName":"transfer","nodeType":"MemberAccess","src":"961:14:4","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"961:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1366,"nodeType":"ExpressionStatement","src":"961:37:4"}]},"functionSelector":"3ccfd60b","id":1368,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"524:8:4","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[],"src":"532:2:4"},"returnParameters":{"id":1330,"nodeType":"ParameterList","parameters":[],"src":"542:0:4"},"scope":1369,"src":"515:490:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1370,"src":"141:866:4","usedErrors":[],"usedEvents":[1302]}],"src":"39:969:4"},"id":4},"contracts/MerkleProofVerifier.sol":{"ast":{"absolutePath":"contracts/MerkleProofVerifier.sol","exportedSymbols":{"Context":[177],"Hashes":[217],"MerkleProof":[1290],"MerkleProofVerifier":[1424],"Ownable":[147]},"id":1425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1371,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:5"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1372,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1425,"sourceUnit":148,"src":"60:52:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1425,"sourceUnit":1291,"src":"114:68:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1374,"name":"Ownable","nameLocations":["218:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"218:7:5"},"id":1375,"nodeType":"InheritanceSpecifier","src":"218:7:5"}],"canonicalName":"MerkleProofVerifier","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1424,"linearizedBaseContracts":[1424,147,177],"name":"MerkleProofVerifier","nameLocation":"195:19:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2eb4a7ab","id":1377,"mutability":"mutable","name":"merkleRoot","nameLocation":"248:10:5","nodeType":"VariableDeclaration","scope":1424,"src":"233:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"233:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"anonymous":false,"eventSelector":"42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b","id":1381,"name":"MerkleRootSet","nameLocation":"273:13:5","nodeType":"EventDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"295:10:5","nodeType":"VariableDeclaration","scope":1381,"src":"287:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"287:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"286:20:5"},"src":"267:40:5"},{"body":{"id":1388,"nodeType":"Block","src":"349:8:5","statements":[]},"id":1389,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1384,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"337:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"341:6:5","memberName":"sender","nodeType":"MemberAccess","src":"337:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1386,"kind":"baseConstructorSpecifier","modifierName":{"id":1383,"name":"Ownable","nameLocations":["329:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"329:7:5"},"nodeType":"ModifierInvocation","src":"329:19:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1382,"nodeType":"ParameterList","parameters":[],"src":"326:2:5"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[],"src":"349:0:5"},"scope":1424,"src":"315:42:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1404,"nodeType":"Block","src":"428:85:5","statements":[{"expression":{"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1396,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"439:10:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1397,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"452:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"439:24:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1399,"nodeType":"ExpressionStatement","src":"439:24:5"},{"eventCall":{"arguments":[{"id":1401,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"493:11:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1400,"name":"MerkleRootSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"479:13:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"479:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1403,"nodeType":"EmitStatement","src":"474:31:5"}]},"functionSelector":"7cb64759","id":1405,"implemented":true,"kind":"function","modifiers":[{"id":1394,"kind":"modifierInvocation","modifierName":{"id":1393,"name":"onlyOwner","nameLocations":["418:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"418:9:5"},"nodeType":"ModifierInvocation","src":"418:9:5"}],"name":"setMerkleRoot","nameLocation":"374:13:5","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"_merkleRoot","nameLocation":"396:11:5","nodeType":"VariableDeclaration","scope":1405,"src":"388:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"388:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"387:21:5"},"returnParameters":{"id":1395,"nodeType":"ParameterList","parameters":[],"src":"428:0:5"},"scope":1424,"src":"365:148:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1422,"nodeType":"Block","src":"617:69:5","statements":[{"expression":{"arguments":[{"id":1417,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"654:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1418,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"661:10:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1419,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"673:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1415,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"635:11:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1290_$","typeString":"type(library MerkleProof)"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"647:6:5","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":246,"src":"635:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:43:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1414,"id":1421,"nodeType":"Return","src":"628:50:5"}]},"functionSelector":"42e49642","id":1423,"implemented":true,"kind":"function","modifiers":[],"name":"verifyTransaction","nameLocation":"530:17:5","nodeType":"FunctionDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"proof","nameLocation":"567:5:5","nodeType":"VariableDeclaration","scope":1423,"src":"548:24:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"548:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1407,"nodeType":"ArrayTypeName","src":"548:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1410,"mutability":"mutable","name":"leaf","nameLocation":"582:4:5","nodeType":"VariableDeclaration","scope":1423,"src":"574:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"574:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"547:40:5"},"returnParameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1423,"src":"611:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1412,"name":"bool","nodeType":"ElementaryTypeName","src":"611:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"610:6:5"},"scope":1424,"src":"521:165:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1425,"src":"186:503:5","usedErrors":[13,18],"usedEvents":[24,1381]}],"src":"33:658:5"},"id":5}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c5ef9198743affc1a2ca0ef9f7e2ca32e20ae989e97fdcec8b7e9211dfcb2a8364736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xEF SWAP2 SWAP9 PUSH21 0x3AFFC1A2CA0EF9F7E2CA32E20AE989E97FDCEC8B7E SWAP3 GT 0xDF 0xCB 0x2A DUP4 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"221:813:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:813:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c5ef9198743affc1a2ca0ef9f7e2ca32e20ae989e97fdcec8b7e9211dfcb2a8364736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xEF SWAP2 SWAP9 PUSH21 0x3AFFC1A2CA0EF9F7E2CA32E20AE989E97FDCEC8B7E SWAP3 GT 0xDF 0xCB 0x2A DUP4 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"221:813:2:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122054d708e865489c1c7b3559d4ce9fd1f34448d12774b55823f86af0a126939bc364736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD 0xD7 ADDMOD 0xE8 PUSH6 0x489C1C7B3559 0xD4 0xCE SWAP16 0xD1 RETURN PREVRANDAO BASEFEE 0xD1 0x27 PUSH21 0xB55823F86AF0A126939BC364736F6C634300081B00 CALLER ","sourceMap":"1353:22982:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122054d708e865489c1c7b3559d4ce9fd1f34448d12774b55823f86af0a126939bc364736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD 0xD7 ADDMOD 0xE8 PUSH6 0x489C1C7B3559 0xD4 0xCE SWAP16 0xD1 RETURN PREVRANDAO BASEFEE 0xD1 0x27 PUSH21 0xB55823F86AF0A126939BC364736F6C634300081B00 CALLER ","sourceMap":"1353:22982:3:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}"}},"contracts/Lock.sol":{"Lock":{"abi":[{"inputs":[{"internalType":"uint256","name":"_unlockTime","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"when","type":"uint256"}],"name":"Withdrawal","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unlockTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_1328":{"entryPoint":null,"id":1328,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":151,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:604:6","nodeType":"YulBlock","src":"0:604:6","statements":[{"nativeSrc":"6:3:6","nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nativeSrc":"95:103:6","nodeType":"YulBlock","src":"95:103:6","statements":[{"body":{"nativeSrc":"141:16:6","nodeType":"YulBlock","src":"141:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:6","nodeType":"YulLiteral","src":"150:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:6","nodeType":"YulLiteral","src":"153:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:6","nodeType":"YulIdentifier","src":"143:6:6"},"nativeSrc":"143:12:6","nodeType":"YulFunctionCall","src":"143:12:6"},"nativeSrc":"143:12:6","nodeType":"YulExpressionStatement","src":"143:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"116:7:6","nodeType":"YulIdentifier","src":"116:7:6"},{"name":"headStart","nativeSrc":"125:9:6","nodeType":"YulIdentifier","src":"125:9:6"}],"functionName":{"name":"sub","nativeSrc":"112:3:6","nodeType":"YulIdentifier","src":"112:3:6"},"nativeSrc":"112:23:6","nodeType":"YulFunctionCall","src":"112:23:6"},{"kind":"number","nativeSrc":"137:2:6","nodeType":"YulLiteral","src":"137:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"108:3:6","nodeType":"YulIdentifier","src":"108:3:6"},"nativeSrc":"108:32:6","nodeType":"YulFunctionCall","src":"108:32:6"},"nativeSrc":"105:52:6","nodeType":"YulIf","src":"105:52:6"},{"nativeSrc":"166:26:6","nodeType":"YulAssignment","src":"166:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"182:9:6","nodeType":"YulIdentifier","src":"182:9:6"}],"functionName":{"name":"mload","nativeSrc":"176:5:6","nodeType":"YulIdentifier","src":"176:5:6"},"nativeSrc":"176:16:6","nodeType":"YulFunctionCall","src":"176:16:6"},"variableNames":[{"name":"value0","nativeSrc":"166:6:6","nodeType":"YulIdentifier","src":"166:6:6"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"14:184:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"61:9:6","nodeType":"YulTypedName","src":"61:9:6","type":""},{"name":"dataEnd","nativeSrc":"72:7:6","nodeType":"YulTypedName","src":"72:7:6","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"84:6:6","nodeType":"YulTypedName","src":"84:6:6","type":""}],"src":"14:184:6"},{"body":{"nativeSrc":"377:225:6","nodeType":"YulBlock","src":"377:225:6","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"394:9:6","nodeType":"YulIdentifier","src":"394:9:6"},{"kind":"number","nativeSrc":"405:2:6","nodeType":"YulLiteral","src":"405:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"387:6:6","nodeType":"YulIdentifier","src":"387:6:6"},"nativeSrc":"387:21:6","nodeType":"YulFunctionCall","src":"387:21:6"},"nativeSrc":"387:21:6","nodeType":"YulExpressionStatement","src":"387:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"428:9:6","nodeType":"YulIdentifier","src":"428:9:6"},{"kind":"number","nativeSrc":"439:2:6","nodeType":"YulLiteral","src":"439:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"424:3:6","nodeType":"YulIdentifier","src":"424:3:6"},"nativeSrc":"424:18:6","nodeType":"YulFunctionCall","src":"424:18:6"},{"kind":"number","nativeSrc":"444:2:6","nodeType":"YulLiteral","src":"444:2:6","type":"","value":"35"}],"functionName":{"name":"mstore","nativeSrc":"417:6:6","nodeType":"YulIdentifier","src":"417:6:6"},"nativeSrc":"417:30:6","nodeType":"YulFunctionCall","src":"417:30:6"},"nativeSrc":"417:30:6","nodeType":"YulExpressionStatement","src":"417:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"467:9:6","nodeType":"YulIdentifier","src":"467:9:6"},{"kind":"number","nativeSrc":"478:2:6","nodeType":"YulLiteral","src":"478:2:6","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"463:3:6","nodeType":"YulIdentifier","src":"463:3:6"},"nativeSrc":"463:18:6","nodeType":"YulFunctionCall","src":"463:18:6"},{"hexValue":"556e6c6f636b2074696d652073686f756c6420626520696e2074686520667574","kind":"string","nativeSrc":"483:34:6","nodeType":"YulLiteral","src":"483:34:6","type":"","value":"Unlock time should be in the fut"}],"functionName":{"name":"mstore","nativeSrc":"456:6:6","nodeType":"YulIdentifier","src":"456:6:6"},"nativeSrc":"456:62:6","nodeType":"YulFunctionCall","src":"456:62:6"},"nativeSrc":"456:62:6","nodeType":"YulExpressionStatement","src":"456:62:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"538:9:6","nodeType":"YulIdentifier","src":"538:9:6"},{"kind":"number","nativeSrc":"549:2:6","nodeType":"YulLiteral","src":"549:2:6","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"534:3:6","nodeType":"YulIdentifier","src":"534:3:6"},"nativeSrc":"534:18:6","nodeType":"YulFunctionCall","src":"534:18:6"},{"hexValue":"757265","kind":"string","nativeSrc":"554:5:6","nodeType":"YulLiteral","src":"554:5:6","type":"","value":"ure"}],"functionName":{"name":"mstore","nativeSrc":"527:6:6","nodeType":"YulIdentifier","src":"527:6:6"},"nativeSrc":"527:33:6","nodeType":"YulFunctionCall","src":"527:33:6"},"nativeSrc":"527:33:6","nodeType":"YulExpressionStatement","src":"527:33:6"},{"nativeSrc":"569:27:6","nodeType":"YulAssignment","src":"569:27:6","value":{"arguments":[{"name":"headStart","nativeSrc":"581:9:6","nodeType":"YulIdentifier","src":"581:9:6"},{"kind":"number","nativeSrc":"592:3:6","nodeType":"YulLiteral","src":"592:3:6","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"577:3:6","nodeType":"YulIdentifier","src":"577:3:6"},"nativeSrc":"577:19:6","nodeType":"YulFunctionCall","src":"577:19:6"},"variableNames":[{"name":"tail","nativeSrc":"569:4:6","nodeType":"YulIdentifier","src":"569:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"203:399:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"354:9:6","nodeType":"YulTypedName","src":"354:9:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"368:4:6","nodeType":"YulTypedName","src":"368:4:6","type":""}],"src":"203:399:6"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f6fa9918d4578fba07be58c41841a4c6937c19725f7f4601884cd186799a8413__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Unlock time should be in the fut\")\n        mstore(add(headStart, 96), \"ure\")\n        tail := add(headStart, 128)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040526040516102a03803806102a08339810160408190526020916097565b804210607e5760405162461bcd60e51b815260206004820152602360248201527f556e6c6f636b2074696d652073686f756c6420626520696e207468652066757460448201526275726560e81b606482015260840160405180910390fd5b600055600180546001600160a01b0319163317905560af565b60006020828403121560a857600080fd5b5051919050565b6101e2806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063251c1aa3146100465780633ccfd60b146100625780638da5cb5b1461006c575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b61006a610097565b005b60015461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000544210156100e75760405162461bcd60e51b8152602060048201526016602482015275165bdd4818d85b89dd081dda5d1a191c985dc81e595d60521b60448201526064015b60405180910390fd5b6001546001600160a01b031633146101385760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932b713ba103a34329037bbb732b960611b60448201526064016100de565b604080514781524260208201527fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93910160405180910390a16001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101a9573d6000803e3d6000fd5b5056fea2646970667358221220fe7abee7b7b62d9bc97367b1201438bdf643426ea0658250f4e8b045158a148864736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2A0 CODESIZE SUB DUP1 PUSH2 0x2A0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x97 JUMP JUMPDEST DUP1 TIMESTAMP LT PUSH1 0x7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E6C6F636B2074696D652073686F756C6420626520696E2074686520667574 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x757265 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH1 0xAF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E2 DUP1 PUSH2 0xBE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x251C1AA3 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6A PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x7F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 SLOAD TIMESTAMP LT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x165BDD4818D85B89DD081DDA5D1A191C985DC81E595D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x138 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2CB7BA9030B932B713BA103A34329037BBB732B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SELFBALANCE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xBF2ED60BD5B5965D685680C01195C9514E4382E28E3A5A2D2D5244BF59411B93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID PUSH27 0xBEE7B7B62D9BC97367B1201438BDF643426EA0658250F4E8B04515 DUP11 EQ DUP9 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"141:866:4:-:0;;;271:238;;;;;;;;;;;;;;;;;;:::i;:::-;358:11;340:15;:29;319:111;;;;-1:-1:-1;;;319:111:4;;405:2:6;319:111:4;;;387:21:6;444:2;424:18;;;417:30;483:34;463:18;;;456:62;-1:-1:-1;;;534:18:6;;;527:33;577:19;;319:111:4;;;;;;;;441:10;:24;475:5;:27;;-1:-1:-1;;;;;;475:27:4;491:10;475:27;;;141:866;;14:184:6;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:6;;14:184;-1:-1:-1;14:184:6:o;203:399::-;141:866:4;;;;;;"},"deployedBytecode":{"functionDebugData":{"@owner_1296":{"entryPoint":null,"id":1296,"parameterSlots":0,"returnSlots":0},"@unlockTime_1294":{"entryPoint":null,"id":1294,"parameterSlots":0,"returnSlots":0},"@withdraw_1368":{"entryPoint":151,"id":1368,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:1370:6","nodeType":"YulBlock","src":"0:1370:6","statements":[{"nativeSrc":"6:3:6","nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nativeSrc":"115:76:6","nodeType":"YulBlock","src":"115:76:6","statements":[{"nativeSrc":"125:26:6","nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:6","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nativeSrc":"148:2:6","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:6","nodeType":"YulIdentifier","src":"133:3:6"},"nativeSrc":"133:18:6","nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nativeSrc":"125:4:6","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:6","nodeType":"YulIdentifier","src":"167:9:6"},{"name":"value0","nativeSrc":"178:6:6","nodeType":"YulIdentifier","src":"178:6:6"}],"functionName":{"name":"mstore","nativeSrc":"160:6:6","nodeType":"YulIdentifier","src":"160:6:6"},"nativeSrc":"160:25:6","nodeType":"YulFunctionCall","src":"160:25:6"},"nativeSrc":"160:25:6","nodeType":"YulExpressionStatement","src":"160:25:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"14:177:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:6","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nativeSrc":"95:6:6","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:6","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:177:6"},{"body":{"nativeSrc":"313:102:6","nodeType":"YulBlock","src":"313:102:6","statements":[{"nativeSrc":"323:26:6","nodeType":"YulAssignment","src":"323:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"335:9:6","nodeType":"YulIdentifier","src":"335:9:6"},{"kind":"number","nativeSrc":"346:2:6","nodeType":"YulLiteral","src":"346:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"331:3:6","nodeType":"YulIdentifier","src":"331:3:6"},"nativeSrc":"331:18:6","nodeType":"YulFunctionCall","src":"331:18:6"},"variableNames":[{"name":"tail","nativeSrc":"323:4:6","nodeType":"YulIdentifier","src":"323:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"365:9:6","nodeType":"YulIdentifier","src":"365:9:6"},{"arguments":[{"name":"value0","nativeSrc":"380:6:6","nodeType":"YulIdentifier","src":"380:6:6"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"396:3:6","nodeType":"YulLiteral","src":"396:3:6","type":"","value":"160"},{"kind":"number","nativeSrc":"401:1:6","nodeType":"YulLiteral","src":"401:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"392:3:6","nodeType":"YulIdentifier","src":"392:3:6"},"nativeSrc":"392:11:6","nodeType":"YulFunctionCall","src":"392:11:6"},{"kind":"number","nativeSrc":"405:1:6","nodeType":"YulLiteral","src":"405:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"388:3:6","nodeType":"YulIdentifier","src":"388:3:6"},"nativeSrc":"388:19:6","nodeType":"YulFunctionCall","src":"388:19:6"}],"functionName":{"name":"and","nativeSrc":"376:3:6","nodeType":"YulIdentifier","src":"376:3:6"},"nativeSrc":"376:32:6","nodeType":"YulFunctionCall","src":"376:32:6"}],"functionName":{"name":"mstore","nativeSrc":"358:6:6","nodeType":"YulIdentifier","src":"358:6:6"},"nativeSrc":"358:51:6","nodeType":"YulFunctionCall","src":"358:51:6"},"nativeSrc":"358:51:6","nodeType":"YulExpressionStatement","src":"358:51:6"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nativeSrc":"196:219:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"282:9:6","nodeType":"YulTypedName","src":"282:9:6","type":""},{"name":"value0","nativeSrc":"293:6:6","nodeType":"YulTypedName","src":"293:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"304:4:6","nodeType":"YulTypedName","src":"304:4:6","type":""}],"src":"196:219:6"},{"body":{"nativeSrc":"594:172:6","nodeType":"YulBlock","src":"594:172:6","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"611:9:6","nodeType":"YulIdentifier","src":"611:9:6"},{"kind":"number","nativeSrc":"622:2:6","nodeType":"YulLiteral","src":"622:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"604:6:6","nodeType":"YulIdentifier","src":"604:6:6"},"nativeSrc":"604:21:6","nodeType":"YulFunctionCall","src":"604:21:6"},"nativeSrc":"604:21:6","nodeType":"YulExpressionStatement","src":"604:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"645:9:6","nodeType":"YulIdentifier","src":"645:9:6"},{"kind":"number","nativeSrc":"656:2:6","nodeType":"YulLiteral","src":"656:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"641:3:6","nodeType":"YulIdentifier","src":"641:3:6"},"nativeSrc":"641:18:6","nodeType":"YulFunctionCall","src":"641:18:6"},{"kind":"number","nativeSrc":"661:2:6","nodeType":"YulLiteral","src":"661:2:6","type":"","value":"22"}],"functionName":{"name":"mstore","nativeSrc":"634:6:6","nodeType":"YulIdentifier","src":"634:6:6"},"nativeSrc":"634:30:6","nodeType":"YulFunctionCall","src":"634:30:6"},"nativeSrc":"634:30:6","nodeType":"YulExpressionStatement","src":"634:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"684:9:6","nodeType":"YulIdentifier","src":"684:9:6"},{"kind":"number","nativeSrc":"695:2:6","nodeType":"YulLiteral","src":"695:2:6","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"680:3:6","nodeType":"YulIdentifier","src":"680:3:6"},"nativeSrc":"680:18:6","nodeType":"YulFunctionCall","src":"680:18:6"},{"hexValue":"596f752063616e277420776974686472617720796574","kind":"string","nativeSrc":"700:24:6","nodeType":"YulLiteral","src":"700:24:6","type":"","value":"You can't withdraw yet"}],"functionName":{"name":"mstore","nativeSrc":"673:6:6","nodeType":"YulIdentifier","src":"673:6:6"},"nativeSrc":"673:52:6","nodeType":"YulFunctionCall","src":"673:52:6"},"nativeSrc":"673:52:6","nodeType":"YulExpressionStatement","src":"673:52:6"},{"nativeSrc":"734:26:6","nodeType":"YulAssignment","src":"734:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"746:9:6","nodeType":"YulIdentifier","src":"746:9:6"},{"kind":"number","nativeSrc":"757:2:6","nodeType":"YulLiteral","src":"757:2:6","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"742:3:6","nodeType":"YulIdentifier","src":"742:3:6"},"nativeSrc":"742:18:6","nodeType":"YulFunctionCall","src":"742:18:6"},"variableNames":[{"name":"tail","nativeSrc":"734:4:6","nodeType":"YulIdentifier","src":"734:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"420:346:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"571:9:6","nodeType":"YulTypedName","src":"571:9:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"585:4:6","nodeType":"YulTypedName","src":"585:4:6","type":""}],"src":"420:346:6"},{"body":{"nativeSrc":"945:170:6","nodeType":"YulBlock","src":"945:170:6","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"962:9:6","nodeType":"YulIdentifier","src":"962:9:6"},{"kind":"number","nativeSrc":"973:2:6","nodeType":"YulLiteral","src":"973:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"955:6:6","nodeType":"YulIdentifier","src":"955:6:6"},"nativeSrc":"955:21:6","nodeType":"YulFunctionCall","src":"955:21:6"},"nativeSrc":"955:21:6","nodeType":"YulExpressionStatement","src":"955:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"996:9:6","nodeType":"YulIdentifier","src":"996:9:6"},{"kind":"number","nativeSrc":"1007:2:6","nodeType":"YulLiteral","src":"1007:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"992:3:6","nodeType":"YulIdentifier","src":"992:3:6"},"nativeSrc":"992:18:6","nodeType":"YulFunctionCall","src":"992:18:6"},{"kind":"number","nativeSrc":"1012:2:6","nodeType":"YulLiteral","src":"1012:2:6","type":"","value":"20"}],"functionName":{"name":"mstore","nativeSrc":"985:6:6","nodeType":"YulIdentifier","src":"985:6:6"},"nativeSrc":"985:30:6","nodeType":"YulFunctionCall","src":"985:30:6"},"nativeSrc":"985:30:6","nodeType":"YulExpressionStatement","src":"985:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1035:9:6","nodeType":"YulIdentifier","src":"1035:9:6"},{"kind":"number","nativeSrc":"1046:2:6","nodeType":"YulLiteral","src":"1046:2:6","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1031:3:6","nodeType":"YulIdentifier","src":"1031:3:6"},"nativeSrc":"1031:18:6","nodeType":"YulFunctionCall","src":"1031:18:6"},{"hexValue":"596f75206172656e277420746865206f776e6572","kind":"string","nativeSrc":"1051:22:6","nodeType":"YulLiteral","src":"1051:22:6","type":"","value":"You aren't the owner"}],"functionName":{"name":"mstore","nativeSrc":"1024:6:6","nodeType":"YulIdentifier","src":"1024:6:6"},"nativeSrc":"1024:50:6","nodeType":"YulFunctionCall","src":"1024:50:6"},"nativeSrc":"1024:50:6","nodeType":"YulExpressionStatement","src":"1024:50:6"},{"nativeSrc":"1083:26:6","nodeType":"YulAssignment","src":"1083:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"1095:9:6","nodeType":"YulIdentifier","src":"1095:9:6"},{"kind":"number","nativeSrc":"1106:2:6","nodeType":"YulLiteral","src":"1106:2:6","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1091:3:6","nodeType":"YulIdentifier","src":"1091:3:6"},"nativeSrc":"1091:18:6","nodeType":"YulFunctionCall","src":"1091:18:6"},"variableNames":[{"name":"tail","nativeSrc":"1083:4:6","nodeType":"YulIdentifier","src":"1083:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"771:344:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"922:9:6","nodeType":"YulTypedName","src":"922:9:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"936:4:6","nodeType":"YulTypedName","src":"936:4:6","type":""}],"src":"771:344:6"},{"body":{"nativeSrc":"1249:119:6","nodeType":"YulBlock","src":"1249:119:6","statements":[{"nativeSrc":"1259:26:6","nodeType":"YulAssignment","src":"1259:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"1271:9:6","nodeType":"YulIdentifier","src":"1271:9:6"},{"kind":"number","nativeSrc":"1282:2:6","nodeType":"YulLiteral","src":"1282:2:6","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1267:3:6","nodeType":"YulIdentifier","src":"1267:3:6"},"nativeSrc":"1267:18:6","nodeType":"YulFunctionCall","src":"1267:18:6"},"variableNames":[{"name":"tail","nativeSrc":"1259:4:6","nodeType":"YulIdentifier","src":"1259:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1301:9:6","nodeType":"YulIdentifier","src":"1301:9:6"},{"name":"value0","nativeSrc":"1312:6:6","nodeType":"YulIdentifier","src":"1312:6:6"}],"functionName":{"name":"mstore","nativeSrc":"1294:6:6","nodeType":"YulIdentifier","src":"1294:6:6"},"nativeSrc":"1294:25:6","nodeType":"YulFunctionCall","src":"1294:25:6"},"nativeSrc":"1294:25:6","nodeType":"YulExpressionStatement","src":"1294:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1339:9:6","nodeType":"YulIdentifier","src":"1339:9:6"},{"kind":"number","nativeSrc":"1350:2:6","nodeType":"YulLiteral","src":"1350:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1335:3:6","nodeType":"YulIdentifier","src":"1335:3:6"},"nativeSrc":"1335:18:6","nodeType":"YulFunctionCall","src":"1335:18:6"},{"name":"value1","nativeSrc":"1355:6:6","nodeType":"YulIdentifier","src":"1355:6:6"}],"functionName":{"name":"mstore","nativeSrc":"1328:6:6","nodeType":"YulIdentifier","src":"1328:6:6"},"nativeSrc":"1328:34:6","nodeType":"YulFunctionCall","src":"1328:34:6"},"nativeSrc":"1328:34:6","nodeType":"YulExpressionStatement","src":"1328:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"1120:248:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1210:9:6","nodeType":"YulTypedName","src":"1210:9:6","type":""},{"name":"value1","nativeSrc":"1221:6:6","nodeType":"YulTypedName","src":"1221:6:6","type":""},{"name":"value0","nativeSrc":"1229:6:6","nodeType":"YulTypedName","src":"1229:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1240:4:6","nodeType":"YulTypedName","src":"1240:4:6","type":""}],"src":"1120:248:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_09be2a1d7c98765b8c1bd9ab3700b54ab19d501eebe572af39b71382f17d12e8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"You can't withdraw yet\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_345d93c1110e55177ee5f687f392a2e775da2aa3d491c8308e925f0505e3530a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"You aren't the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063251c1aa3146100465780633ccfd60b146100625780638da5cb5b1461006c575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b61006a610097565b005b60015461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000544210156100e75760405162461bcd60e51b8152602060048201526016602482015275165bdd4818d85b89dd081dda5d1a191c985dc81e595d60521b60448201526064015b60405180910390fd5b6001546001600160a01b031633146101385760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932b713ba103a34329037bbb732b960611b60448201526064016100de565b604080514781524260208201527fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93910160405180910390a16001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101a9573d6000803e3d6000fd5b5056fea2646970667358221220fe7abee7b7b62d9bc97367b1201438bdf643426ea0658250f4e8b045158a148864736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x251C1AA3 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6A PUSH2 0x97 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x7F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 SLOAD TIMESTAMP LT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x165BDD4818D85B89DD081DDA5D1A191C985DC81E595D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x138 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2CB7BA9030B932B713BA103A34329037BBB732B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SELFBALANCE DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xBF2ED60BD5B5965D685680C01195C9514E4382E28E3A5A2D2D5244BF59411B93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID PUSH27 0xBEE7B7B62D9BC97367B1201438BDF643426EA0658250F4E8B04515 DUP11 EQ DUP9 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"141:866:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;161:22;;;;;;;;;160:25:6;;;148:2;133:18;161:22:4;;;;;;;;515:490;;;:::i;:::-;;189:28;;;;;-1:-1:-1;;;;;189:28:4;;;;;;-1:-1:-1;;;;;376:32:6;;;358:51;;346:2;331:18;189:28:4;196:219:6;515:490:4;785:10;;766:15;:29;;758:64;;;;-1:-1:-1;;;758:64:4;;622:2:6;758:64:4;;;604:21:6;661:2;641:18;;;634:30;-1:-1:-1;;;680:18:6;;;673:52;742:18;;758:64:4;;;;;;;;;854:5;;-1:-1:-1;;;;;854:5:4;840:10;:19;832:52;;;;-1:-1:-1;;;832:52:4;;973:2:6;832:52:4;;;955:21:6;1012:2;992:18;;;985:30;-1:-1:-1;;;1031:18:6;;;1024:50;1091:18;;832:52:4;771:344:6;832:52:4;900:50;;;911:21;1294:25:6;;934:15:4;1350:2:6;1335:18;;1328:34;900:50:4;;1267:18:6;900:50:4;;;;;;;961:5;;:37;;-1:-1:-1;;;;;961:5:4;;;;976:21;961:37;;;;;:5;:37;:5;:37;976:21;961:5;:37;;;;;;;;;;;;;;;;;;;;;515:490::o"},"methodIdentifiers":{"owner()":"8da5cb5b","unlockTime()":"251c1aa3","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lock.sol\":\"Lock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Lock.sol\":{\"keccak256\":\"0xe1ecd761c0b4611bc5ba6b478595c63619abaf67e67fdef3bb3919ed1b8c2fd8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4c86d1b0dc849faf58e22369dca9aef49e0bddbc031eafe6d656c12f04b56a22\",\"dweb:/ipfs/QmWi1mCdCmgHhYQuNPxspBDZXMVs6jq1sLxMYcaPZTpQtz\"]}},\"version\":1}"}},"contracts/MerkleProofVerifier.sol":{"MerkleProofVerifier":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"MerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"verifyTransaction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_1389":{"entryPoint":null,"id":1389,"parameterSlots":0,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":65,"id":146,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:219:6","nodeType":"YulBlock","src":"0:219:6","statements":[{"nativeSrc":"6:3:6","nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nativeSrc":"115:102:6","nodeType":"YulBlock","src":"115:102:6","statements":[{"nativeSrc":"125:26:6","nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:6","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nativeSrc":"148:2:6","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:6","nodeType":"YulIdentifier","src":"133:3:6"},"nativeSrc":"133:18:6","nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nativeSrc":"125:4:6","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:6","nodeType":"YulIdentifier","src":"167:9:6"},{"arguments":[{"name":"value0","nativeSrc":"182:6:6","nodeType":"YulIdentifier","src":"182:6:6"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"198:3:6","nodeType":"YulLiteral","src":"198:3:6","type":"","value":"160"},{"kind":"number","nativeSrc":"203:1:6","nodeType":"YulLiteral","src":"203:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"194:3:6","nodeType":"YulIdentifier","src":"194:3:6"},"nativeSrc":"194:11:6","nodeType":"YulFunctionCall","src":"194:11:6"},{"kind":"number","nativeSrc":"207:1:6","nodeType":"YulLiteral","src":"207:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"190:3:6","nodeType":"YulIdentifier","src":"190:3:6"},"nativeSrc":"190:19:6","nodeType":"YulFunctionCall","src":"190:19:6"}],"functionName":{"name":"and","nativeSrc":"178:3:6","nodeType":"YulIdentifier","src":"178:3:6"},"nativeSrc":"178:32:6","nodeType":"YulFunctionCall","src":"178:32:6"}],"functionName":{"name":"mstore","nativeSrc":"160:6:6","nodeType":"YulIdentifier","src":"160:6:6"},"nativeSrc":"160:51:6","nodeType":"YulFunctionCall","src":"160:51:6"},"nativeSrc":"160:51:6","nodeType":"YulExpressionStatement","src":"160:51:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"14:203:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:6","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nativeSrc":"95:6:6","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:6","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:203:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103e8806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632eb4a7ab1461006757806342e4964214610083578063715018a6146100a65780637cb64759146100b05780638da5cb5b146100c3578063f2fde38b146100de575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b6100966100913660046102de565b6100f1565b604051901515815260200161007a565b6100ae61013c565b005b6100ae6100be36600461035a565b610150565b6000546040516001600160a01b03909116815260200161007a565b6100ae6100ec366004610373565b610193565b60006101348484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015491508590506101d6565b949350505050565b6101446101ec565b61014e6000610219565b565b6101586101ec565b60018190556040518181527f42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b9060200160405180910390a150565b61019b6101ec565b6001600160a01b0381166101ca57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101d381610219565b50565b6000826101e38584610269565b14949350505050565b6000546001600160a01b0316331461014e5760405163118cdaa760e01b81523360048201526024016101c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b84518110156102a45761029a8286838151811061028d5761028d61039c565b60200260200101516102ac565b915060010161026e565b509392505050565b60008183106102c85760008281526020849052604090206102d7565b60008381526020839052604090205b9392505050565b6000806000604084860312156102f357600080fd5b833567ffffffffffffffff81111561030a57600080fd5b8401601f8101861361031b57600080fd5b803567ffffffffffffffff81111561033257600080fd5b8660208260051b840101111561034757600080fd5b6020918201979096509401359392505050565b60006020828403121561036c57600080fd5b5035919050565b60006020828403121561038557600080fd5b81356001600160a01b03811681146102d757600080fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212201508f4d248efd69561fb746e2dcdccb44a4474d24c8c53f3fe7b3c20c5cc428964736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER DUP1 PUSH1 0x35 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH1 0x41 JUMP JUMPDEST POP PUSH1 0x91 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP1 PUSH2 0xA0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x42E49642 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x70 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x96 PUSH2 0x91 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DE JUMP JUMPDEST PUSH2 0xF1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xAE PUSH2 0x13C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xAE PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x35A JUMP JUMPDEST PUSH2 0x150 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xAE PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x373 JUMP JUMPDEST PUSH2 0x193 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x134 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x1 SLOAD SWAP2 POP DUP6 SWAP1 POP PUSH2 0x1D6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x144 PUSH2 0x1EC JUMP JUMPDEST PUSH2 0x14E PUSH1 0x0 PUSH2 0x219 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x42CBC405E4DBF1B691E85B9A34B08ECFCF7A9AD9078BF4D645CCFA1FAC11C10B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x19B PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D3 DUP2 PUSH2 0x219 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E3 DUP6 DUP5 PUSH2 0x269 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2A4 JUMPI PUSH2 0x29A DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x28D JUMPI PUSH2 0x28D PUSH2 0x39C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2AC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x26E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP8 SWAP1 SWAP7 POP SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO ADDMOD DELEGATECALL 0xD2 BASEFEE 0xEF 0xD6 SWAP6 PUSH2 0xFB74 PUSH15 0x2DCDCCB44A4474D24C8C53F3FE7B3C KECCAK256 0xC5 0xCC TIMESTAMP DUP10 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"186:503:5:-:0;;;315:42;;;;;;;;;-1:-1:-1;337:10:5;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;160:51:6;133:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;186:503:5;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:203:6:-;186:503:5;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_84":{"entryPoint":492,"id":84,"parameterSlots":0,"returnSlots":0},"@_efficientKeccak256_216":{"entryPoint":null,"id":216,"parameterSlots":2,"returnSlots":1},"@_msgSender_159":{"entryPoint":null,"id":159,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":537,"id":146,"parameterSlots":1,"returnSlots":0},"@commutativeKeccak256_204":{"entryPoint":684,"id":204,"parameterSlots":2,"returnSlots":1},"@merkleRoot_1377":{"entryPoint":null,"id":1377,"parameterSlots":0,"returnSlots":0},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@processProof_287":{"entryPoint":617,"id":287,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":316,"id":98,"parameterSlots":0,"returnSlots":0},"@setMerkleRoot_1405":{"entryPoint":336,"id":1405,"parameterSlots":1,"returnSlots":0},"@transferOwnership_126":{"entryPoint":403,"id":126,"parameterSlots":1,"returnSlots":0},"@verifyTransaction_1423":{"entryPoint":241,"id":1423,"parameterSlots":3,"returnSlots":1},"@verify_246":{"entryPoint":470,"id":246,"parameterSlots":3,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":883,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_bytes32":{"entryPoint":734,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32":{"entryPoint":858,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":924,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1982:6","nodeType":"YulBlock","src":"0:1982:6","statements":[{"nativeSrc":"6:3:6","nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nativeSrc":"115:76:6","nodeType":"YulBlock","src":"115:76:6","statements":[{"nativeSrc":"125:26:6","nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:6","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nativeSrc":"148:2:6","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:6","nodeType":"YulIdentifier","src":"133:3:6"},"nativeSrc":"133:18:6","nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nativeSrc":"125:4:6","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:6","nodeType":"YulIdentifier","src":"167:9:6"},{"name":"value0","nativeSrc":"178:6:6","nodeType":"YulIdentifier","src":"178:6:6"}],"functionName":{"name":"mstore","nativeSrc":"160:6:6","nodeType":"YulIdentifier","src":"160:6:6"},"nativeSrc":"160:25:6","nodeType":"YulFunctionCall","src":"160:25:6"},"nativeSrc":"160:25:6","nodeType":"YulExpressionStatement","src":"160:25:6"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"14:177:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:6","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nativeSrc":"95:6:6","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:6","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:177:6"},{"body":{"nativeSrc":"318:608:6","nodeType":"YulBlock","src":"318:608:6","statements":[{"body":{"nativeSrc":"364:16:6","nodeType":"YulBlock","src":"364:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"373:1:6","nodeType":"YulLiteral","src":"373:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"376:1:6","nodeType":"YulLiteral","src":"376:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"366:6:6","nodeType":"YulIdentifier","src":"366:6:6"},"nativeSrc":"366:12:6","nodeType":"YulFunctionCall","src":"366:12:6"},"nativeSrc":"366:12:6","nodeType":"YulExpressionStatement","src":"366:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"339:7:6","nodeType":"YulIdentifier","src":"339:7:6"},{"name":"headStart","nativeSrc":"348:9:6","nodeType":"YulIdentifier","src":"348:9:6"}],"functionName":{"name":"sub","nativeSrc":"335:3:6","nodeType":"YulIdentifier","src":"335:3:6"},"nativeSrc":"335:23:6","nodeType":"YulFunctionCall","src":"335:23:6"},{"kind":"number","nativeSrc":"360:2:6","nodeType":"YulLiteral","src":"360:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"331:3:6","nodeType":"YulIdentifier","src":"331:3:6"},"nativeSrc":"331:32:6","nodeType":"YulFunctionCall","src":"331:32:6"},"nativeSrc":"328:52:6","nodeType":"YulIf","src":"328:52:6"},{"nativeSrc":"389:37:6","nodeType":"YulVariableDeclaration","src":"389:37:6","value":{"arguments":[{"name":"headStart","nativeSrc":"416:9:6","nodeType":"YulIdentifier","src":"416:9:6"}],"functionName":{"name":"calldataload","nativeSrc":"403:12:6","nodeType":"YulIdentifier","src":"403:12:6"},"nativeSrc":"403:23:6","nodeType":"YulFunctionCall","src":"403:23:6"},"variables":[{"name":"offset","nativeSrc":"393:6:6","nodeType":"YulTypedName","src":"393:6:6","type":""}]},{"body":{"nativeSrc":"469:16:6","nodeType":"YulBlock","src":"469:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"478:1:6","nodeType":"YulLiteral","src":"478:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"481:1:6","nodeType":"YulLiteral","src":"481:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"471:6:6","nodeType":"YulIdentifier","src":"471:6:6"},"nativeSrc":"471:12:6","nodeType":"YulFunctionCall","src":"471:12:6"},"nativeSrc":"471:12:6","nodeType":"YulExpressionStatement","src":"471:12:6"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"441:6:6","nodeType":"YulIdentifier","src":"441:6:6"},{"kind":"number","nativeSrc":"449:18:6","nodeType":"YulLiteral","src":"449:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"438:2:6","nodeType":"YulIdentifier","src":"438:2:6"},"nativeSrc":"438:30:6","nodeType":"YulFunctionCall","src":"438:30:6"},"nativeSrc":"435:50:6","nodeType":"YulIf","src":"435:50:6"},{"nativeSrc":"494:32:6","nodeType":"YulVariableDeclaration","src":"494:32:6","value":{"arguments":[{"name":"headStart","nativeSrc":"508:9:6","nodeType":"YulIdentifier","src":"508:9:6"},{"name":"offset","nativeSrc":"519:6:6","nodeType":"YulIdentifier","src":"519:6:6"}],"functionName":{"name":"add","nativeSrc":"504:3:6","nodeType":"YulIdentifier","src":"504:3:6"},"nativeSrc":"504:22:6","nodeType":"YulFunctionCall","src":"504:22:6"},"variables":[{"name":"_1","nativeSrc":"498:2:6","nodeType":"YulTypedName","src":"498:2:6","type":""}]},{"body":{"nativeSrc":"574:16:6","nodeType":"YulBlock","src":"574:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"583:1:6","nodeType":"YulLiteral","src":"583:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"586:1:6","nodeType":"YulLiteral","src":"586:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"576:6:6","nodeType":"YulIdentifier","src":"576:6:6"},"nativeSrc":"576:12:6","nodeType":"YulFunctionCall","src":"576:12:6"},"nativeSrc":"576:12:6","nodeType":"YulExpressionStatement","src":"576:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"553:2:6","nodeType":"YulIdentifier","src":"553:2:6"},{"kind":"number","nativeSrc":"557:4:6","nodeType":"YulLiteral","src":"557:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"549:3:6","nodeType":"YulIdentifier","src":"549:3:6"},"nativeSrc":"549:13:6","nodeType":"YulFunctionCall","src":"549:13:6"},{"name":"dataEnd","nativeSrc":"564:7:6","nodeType":"YulIdentifier","src":"564:7:6"}],"functionName":{"name":"slt","nativeSrc":"545:3:6","nodeType":"YulIdentifier","src":"545:3:6"},"nativeSrc":"545:27:6","nodeType":"YulFunctionCall","src":"545:27:6"}],"functionName":{"name":"iszero","nativeSrc":"538:6:6","nodeType":"YulIdentifier","src":"538:6:6"},"nativeSrc":"538:35:6","nodeType":"YulFunctionCall","src":"538:35:6"},"nativeSrc":"535:55:6","nodeType":"YulIf","src":"535:55:6"},{"nativeSrc":"599:30:6","nodeType":"YulVariableDeclaration","src":"599:30:6","value":{"arguments":[{"name":"_1","nativeSrc":"626:2:6","nodeType":"YulIdentifier","src":"626:2:6"}],"functionName":{"name":"calldataload","nativeSrc":"613:12:6","nodeType":"YulIdentifier","src":"613:12:6"},"nativeSrc":"613:16:6","nodeType":"YulFunctionCall","src":"613:16:6"},"variables":[{"name":"length","nativeSrc":"603:6:6","nodeType":"YulTypedName","src":"603:6:6","type":""}]},{"body":{"nativeSrc":"672:16:6","nodeType":"YulBlock","src":"672:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"681:1:6","nodeType":"YulLiteral","src":"681:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"684:1:6","nodeType":"YulLiteral","src":"684:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"674:6:6","nodeType":"YulIdentifier","src":"674:6:6"},"nativeSrc":"674:12:6","nodeType":"YulFunctionCall","src":"674:12:6"},"nativeSrc":"674:12:6","nodeType":"YulExpressionStatement","src":"674:12:6"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"644:6:6","nodeType":"YulIdentifier","src":"644:6:6"},{"kind":"number","nativeSrc":"652:18:6","nodeType":"YulLiteral","src":"652:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"641:2:6","nodeType":"YulIdentifier","src":"641:2:6"},"nativeSrc":"641:30:6","nodeType":"YulFunctionCall","src":"641:30:6"},"nativeSrc":"638:50:6","nodeType":"YulIf","src":"638:50:6"},{"body":{"nativeSrc":"748:16:6","nodeType":"YulBlock","src":"748:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"757:1:6","nodeType":"YulLiteral","src":"757:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"760:1:6","nodeType":"YulLiteral","src":"760:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"750:6:6","nodeType":"YulIdentifier","src":"750:6:6"},"nativeSrc":"750:12:6","nodeType":"YulFunctionCall","src":"750:12:6"},"nativeSrc":"750:12:6","nodeType":"YulExpressionStatement","src":"750:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"711:2:6","nodeType":"YulIdentifier","src":"711:2:6"},{"arguments":[{"kind":"number","nativeSrc":"719:1:6","nodeType":"YulLiteral","src":"719:1:6","type":"","value":"5"},{"name":"length","nativeSrc":"722:6:6","nodeType":"YulIdentifier","src":"722:6:6"}],"functionName":{"name":"shl","nativeSrc":"715:3:6","nodeType":"YulIdentifier","src":"715:3:6"},"nativeSrc":"715:14:6","nodeType":"YulFunctionCall","src":"715:14:6"}],"functionName":{"name":"add","nativeSrc":"707:3:6","nodeType":"YulIdentifier","src":"707:3:6"},"nativeSrc":"707:23:6","nodeType":"YulFunctionCall","src":"707:23:6"},{"kind":"number","nativeSrc":"732:4:6","nodeType":"YulLiteral","src":"732:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"703:3:6","nodeType":"YulIdentifier","src":"703:3:6"},"nativeSrc":"703:34:6","nodeType":"YulFunctionCall","src":"703:34:6"},{"name":"dataEnd","nativeSrc":"739:7:6","nodeType":"YulIdentifier","src":"739:7:6"}],"functionName":{"name":"gt","nativeSrc":"700:2:6","nodeType":"YulIdentifier","src":"700:2:6"},"nativeSrc":"700:47:6","nodeType":"YulFunctionCall","src":"700:47:6"},"nativeSrc":"697:67:6","nodeType":"YulIf","src":"697:67:6"},{"nativeSrc":"773:23:6","nodeType":"YulAssignment","src":"773:23:6","value":{"arguments":[{"name":"_1","nativeSrc":"787:2:6","nodeType":"YulIdentifier","src":"787:2:6"},{"kind":"number","nativeSrc":"791:4:6","nodeType":"YulLiteral","src":"791:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"783:3:6","nodeType":"YulIdentifier","src":"783:3:6"},"nativeSrc":"783:13:6","nodeType":"YulFunctionCall","src":"783:13:6"},"variableNames":[{"name":"value0","nativeSrc":"773:6:6","nodeType":"YulIdentifier","src":"773:6:6"}]},{"nativeSrc":"805:16:6","nodeType":"YulAssignment","src":"805:16:6","value":{"name":"length","nativeSrc":"815:6:6","nodeType":"YulIdentifier","src":"815:6:6"},"variableNames":[{"name":"value1","nativeSrc":"805:6:6","nodeType":"YulIdentifier","src":"805:6:6"}]},{"nativeSrc":"830:14:6","nodeType":"YulVariableDeclaration","src":"830:14:6","value":{"kind":"number","nativeSrc":"843:1:6","nodeType":"YulLiteral","src":"843:1:6","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"834:5:6","nodeType":"YulTypedName","src":"834:5:6","type":""}]},{"nativeSrc":"853:43:6","nodeType":"YulAssignment","src":"853:43:6","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"879:9:6","nodeType":"YulIdentifier","src":"879:9:6"},{"kind":"number","nativeSrc":"890:4:6","nodeType":"YulLiteral","src":"890:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"875:3:6","nodeType":"YulIdentifier","src":"875:3:6"},"nativeSrc":"875:20:6","nodeType":"YulFunctionCall","src":"875:20:6"}],"functionName":{"name":"calldataload","nativeSrc":"862:12:6","nodeType":"YulIdentifier","src":"862:12:6"},"nativeSrc":"862:34:6","nodeType":"YulFunctionCall","src":"862:34:6"},"variableNames":[{"name":"value","nativeSrc":"853:5:6","nodeType":"YulIdentifier","src":"853:5:6"}]},{"nativeSrc":"905:15:6","nodeType":"YulAssignment","src":"905:15:6","value":{"name":"value","nativeSrc":"915:5:6","nodeType":"YulIdentifier","src":"915:5:6"},"variableNames":[{"name":"value2","nativeSrc":"905:6:6","nodeType":"YulIdentifier","src":"905:6:6"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_bytes32","nativeSrc":"196:730:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"268:9:6","nodeType":"YulTypedName","src":"268:9:6","type":""},{"name":"dataEnd","nativeSrc":"279:7:6","nodeType":"YulTypedName","src":"279:7:6","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"291:6:6","nodeType":"YulTypedName","src":"291:6:6","type":""},{"name":"value1","nativeSrc":"299:6:6","nodeType":"YulTypedName","src":"299:6:6","type":""},{"name":"value2","nativeSrc":"307:6:6","nodeType":"YulTypedName","src":"307:6:6","type":""}],"src":"196:730:6"},{"body":{"nativeSrc":"1026:92:6","nodeType":"YulBlock","src":"1026:92:6","statements":[{"nativeSrc":"1036:26:6","nodeType":"YulAssignment","src":"1036:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"1048:9:6","nodeType":"YulIdentifier","src":"1048:9:6"},{"kind":"number","nativeSrc":"1059:2:6","nodeType":"YulLiteral","src":"1059:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1044:3:6","nodeType":"YulIdentifier","src":"1044:3:6"},"nativeSrc":"1044:18:6","nodeType":"YulFunctionCall","src":"1044:18:6"},"variableNames":[{"name":"tail","nativeSrc":"1036:4:6","nodeType":"YulIdentifier","src":"1036:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1078:9:6","nodeType":"YulIdentifier","src":"1078:9:6"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1103:6:6","nodeType":"YulIdentifier","src":"1103:6:6"}],"functionName":{"name":"iszero","nativeSrc":"1096:6:6","nodeType":"YulIdentifier","src":"1096:6:6"},"nativeSrc":"1096:14:6","nodeType":"YulFunctionCall","src":"1096:14:6"}],"functionName":{"name":"iszero","nativeSrc":"1089:6:6","nodeType":"YulIdentifier","src":"1089:6:6"},"nativeSrc":"1089:22:6","nodeType":"YulFunctionCall","src":"1089:22:6"}],"functionName":{"name":"mstore","nativeSrc":"1071:6:6","nodeType":"YulIdentifier","src":"1071:6:6"},"nativeSrc":"1071:41:6","nodeType":"YulFunctionCall","src":"1071:41:6"},"nativeSrc":"1071:41:6","nodeType":"YulExpressionStatement","src":"1071:41:6"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"931:187:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"995:9:6","nodeType":"YulTypedName","src":"995:9:6","type":""},{"name":"value0","nativeSrc":"1006:6:6","nodeType":"YulTypedName","src":"1006:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1017:4:6","nodeType":"YulTypedName","src":"1017:4:6","type":""}],"src":"931:187:6"},{"body":{"nativeSrc":"1193:156:6","nodeType":"YulBlock","src":"1193:156:6","statements":[{"body":{"nativeSrc":"1239:16:6","nodeType":"YulBlock","src":"1239:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1248:1:6","nodeType":"YulLiteral","src":"1248:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"1251:1:6","nodeType":"YulLiteral","src":"1251:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1241:6:6","nodeType":"YulIdentifier","src":"1241:6:6"},"nativeSrc":"1241:12:6","nodeType":"YulFunctionCall","src":"1241:12:6"},"nativeSrc":"1241:12:6","nodeType":"YulExpressionStatement","src":"1241:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1214:7:6","nodeType":"YulIdentifier","src":"1214:7:6"},{"name":"headStart","nativeSrc":"1223:9:6","nodeType":"YulIdentifier","src":"1223:9:6"}],"functionName":{"name":"sub","nativeSrc":"1210:3:6","nodeType":"YulIdentifier","src":"1210:3:6"},"nativeSrc":"1210:23:6","nodeType":"YulFunctionCall","src":"1210:23:6"},{"kind":"number","nativeSrc":"1235:2:6","nodeType":"YulLiteral","src":"1235:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1206:3:6","nodeType":"YulIdentifier","src":"1206:3:6"},"nativeSrc":"1206:32:6","nodeType":"YulFunctionCall","src":"1206:32:6"},"nativeSrc":"1203:52:6","nodeType":"YulIf","src":"1203:52:6"},{"nativeSrc":"1264:14:6","nodeType":"YulVariableDeclaration","src":"1264:14:6","value":{"kind":"number","nativeSrc":"1277:1:6","nodeType":"YulLiteral","src":"1277:1:6","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"1268:5:6","nodeType":"YulTypedName","src":"1268:5:6","type":""}]},{"nativeSrc":"1287:32:6","nodeType":"YulAssignment","src":"1287:32:6","value":{"arguments":[{"name":"headStart","nativeSrc":"1309:9:6","nodeType":"YulIdentifier","src":"1309:9:6"}],"functionName":{"name":"calldataload","nativeSrc":"1296:12:6","nodeType":"YulIdentifier","src":"1296:12:6"},"nativeSrc":"1296:23:6","nodeType":"YulFunctionCall","src":"1296:23:6"},"variableNames":[{"name":"value","nativeSrc":"1287:5:6","nodeType":"YulIdentifier","src":"1287:5:6"}]},{"nativeSrc":"1328:15:6","nodeType":"YulAssignment","src":"1328:15:6","value":{"name":"value","nativeSrc":"1338:5:6","nodeType":"YulIdentifier","src":"1338:5:6"},"variableNames":[{"name":"value0","nativeSrc":"1328:6:6","nodeType":"YulIdentifier","src":"1328:6:6"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"1123:226:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1159:9:6","nodeType":"YulTypedName","src":"1159:9:6","type":""},{"name":"dataEnd","nativeSrc":"1170:7:6","nodeType":"YulTypedName","src":"1170:7:6","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1182:6:6","nodeType":"YulTypedName","src":"1182:6:6","type":""}],"src":"1123:226:6"},{"body":{"nativeSrc":"1455:102:6","nodeType":"YulBlock","src":"1455:102:6","statements":[{"nativeSrc":"1465:26:6","nodeType":"YulAssignment","src":"1465:26:6","value":{"arguments":[{"name":"headStart","nativeSrc":"1477:9:6","nodeType":"YulIdentifier","src":"1477:9:6"},{"kind":"number","nativeSrc":"1488:2:6","nodeType":"YulLiteral","src":"1488:2:6","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1473:3:6","nodeType":"YulIdentifier","src":"1473:3:6"},"nativeSrc":"1473:18:6","nodeType":"YulFunctionCall","src":"1473:18:6"},"variableNames":[{"name":"tail","nativeSrc":"1465:4:6","nodeType":"YulIdentifier","src":"1465:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1507:9:6","nodeType":"YulIdentifier","src":"1507:9:6"},{"arguments":[{"name":"value0","nativeSrc":"1522:6:6","nodeType":"YulIdentifier","src":"1522:6:6"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1538:3:6","nodeType":"YulLiteral","src":"1538:3:6","type":"","value":"160"},{"kind":"number","nativeSrc":"1543:1:6","nodeType":"YulLiteral","src":"1543:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1534:3:6","nodeType":"YulIdentifier","src":"1534:3:6"},"nativeSrc":"1534:11:6","nodeType":"YulFunctionCall","src":"1534:11:6"},{"kind":"number","nativeSrc":"1547:1:6","nodeType":"YulLiteral","src":"1547:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1530:3:6","nodeType":"YulIdentifier","src":"1530:3:6"},"nativeSrc":"1530:19:6","nodeType":"YulFunctionCall","src":"1530:19:6"}],"functionName":{"name":"and","nativeSrc":"1518:3:6","nodeType":"YulIdentifier","src":"1518:3:6"},"nativeSrc":"1518:32:6","nodeType":"YulFunctionCall","src":"1518:32:6"}],"functionName":{"name":"mstore","nativeSrc":"1500:6:6","nodeType":"YulIdentifier","src":"1500:6:6"},"nativeSrc":"1500:51:6","nodeType":"YulFunctionCall","src":"1500:51:6"},"nativeSrc":"1500:51:6","nodeType":"YulExpressionStatement","src":"1500:51:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1354:203:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1424:9:6","nodeType":"YulTypedName","src":"1424:9:6","type":""},{"name":"value0","nativeSrc":"1435:6:6","nodeType":"YulTypedName","src":"1435:6:6","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1446:4:6","nodeType":"YulTypedName","src":"1446:4:6","type":""}],"src":"1354:203:6"},{"body":{"nativeSrc":"1632:216:6","nodeType":"YulBlock","src":"1632:216:6","statements":[{"body":{"nativeSrc":"1678:16:6","nodeType":"YulBlock","src":"1678:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1687:1:6","nodeType":"YulLiteral","src":"1687:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"1690:1:6","nodeType":"YulLiteral","src":"1690:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1680:6:6","nodeType":"YulIdentifier","src":"1680:6:6"},"nativeSrc":"1680:12:6","nodeType":"YulFunctionCall","src":"1680:12:6"},"nativeSrc":"1680:12:6","nodeType":"YulExpressionStatement","src":"1680:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1653:7:6","nodeType":"YulIdentifier","src":"1653:7:6"},{"name":"headStart","nativeSrc":"1662:9:6","nodeType":"YulIdentifier","src":"1662:9:6"}],"functionName":{"name":"sub","nativeSrc":"1649:3:6","nodeType":"YulIdentifier","src":"1649:3:6"},"nativeSrc":"1649:23:6","nodeType":"YulFunctionCall","src":"1649:23:6"},{"kind":"number","nativeSrc":"1674:2:6","nodeType":"YulLiteral","src":"1674:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1645:3:6","nodeType":"YulIdentifier","src":"1645:3:6"},"nativeSrc":"1645:32:6","nodeType":"YulFunctionCall","src":"1645:32:6"},"nativeSrc":"1642:52:6","nodeType":"YulIf","src":"1642:52:6"},{"nativeSrc":"1703:36:6","nodeType":"YulVariableDeclaration","src":"1703:36:6","value":{"arguments":[{"name":"headStart","nativeSrc":"1729:9:6","nodeType":"YulIdentifier","src":"1729:9:6"}],"functionName":{"name":"calldataload","nativeSrc":"1716:12:6","nodeType":"YulIdentifier","src":"1716:12:6"},"nativeSrc":"1716:23:6","nodeType":"YulFunctionCall","src":"1716:23:6"},"variables":[{"name":"value","nativeSrc":"1707:5:6","nodeType":"YulTypedName","src":"1707:5:6","type":""}]},{"body":{"nativeSrc":"1802:16:6","nodeType":"YulBlock","src":"1802:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1811:1:6","nodeType":"YulLiteral","src":"1811:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"1814:1:6","nodeType":"YulLiteral","src":"1814:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1804:6:6","nodeType":"YulIdentifier","src":"1804:6:6"},"nativeSrc":"1804:12:6","nodeType":"YulFunctionCall","src":"1804:12:6"},"nativeSrc":"1804:12:6","nodeType":"YulExpressionStatement","src":"1804:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1761:5:6","nodeType":"YulIdentifier","src":"1761:5:6"},{"arguments":[{"name":"value","nativeSrc":"1772:5:6","nodeType":"YulIdentifier","src":"1772:5:6"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1787:3:6","nodeType":"YulLiteral","src":"1787:3:6","type":"","value":"160"},{"kind":"number","nativeSrc":"1792:1:6","nodeType":"YulLiteral","src":"1792:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1783:3:6","nodeType":"YulIdentifier","src":"1783:3:6"},"nativeSrc":"1783:11:6","nodeType":"YulFunctionCall","src":"1783:11:6"},{"kind":"number","nativeSrc":"1796:1:6","nodeType":"YulLiteral","src":"1796:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1779:3:6","nodeType":"YulIdentifier","src":"1779:3:6"},"nativeSrc":"1779:19:6","nodeType":"YulFunctionCall","src":"1779:19:6"}],"functionName":{"name":"and","nativeSrc":"1768:3:6","nodeType":"YulIdentifier","src":"1768:3:6"},"nativeSrc":"1768:31:6","nodeType":"YulFunctionCall","src":"1768:31:6"}],"functionName":{"name":"eq","nativeSrc":"1758:2:6","nodeType":"YulIdentifier","src":"1758:2:6"},"nativeSrc":"1758:42:6","nodeType":"YulFunctionCall","src":"1758:42:6"}],"functionName":{"name":"iszero","nativeSrc":"1751:6:6","nodeType":"YulIdentifier","src":"1751:6:6"},"nativeSrc":"1751:50:6","nodeType":"YulFunctionCall","src":"1751:50:6"},"nativeSrc":"1748:70:6","nodeType":"YulIf","src":"1748:70:6"},{"nativeSrc":"1827:15:6","nodeType":"YulAssignment","src":"1827:15:6","value":{"name":"value","nativeSrc":"1837:5:6","nodeType":"YulIdentifier","src":"1837:5:6"},"variableNames":[{"name":"value0","nativeSrc":"1827:6:6","nodeType":"YulIdentifier","src":"1827:6:6"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1562:286:6","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1598:9:6","nodeType":"YulTypedName","src":"1598:9:6","type":""},{"name":"dataEnd","nativeSrc":"1609:7:6","nodeType":"YulTypedName","src":"1609:7:6","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1621:6:6","nodeType":"YulTypedName","src":"1621:6:6","type":""}],"src":"1562:286:6"},{"body":{"nativeSrc":"1885:95:6","nodeType":"YulBlock","src":"1885:95:6","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1902:1:6","nodeType":"YulLiteral","src":"1902:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1909:3:6","nodeType":"YulLiteral","src":"1909:3:6","type":"","value":"224"},{"kind":"number","nativeSrc":"1914:10:6","nodeType":"YulLiteral","src":"1914:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1905:3:6","nodeType":"YulIdentifier","src":"1905:3:6"},"nativeSrc":"1905:20:6","nodeType":"YulFunctionCall","src":"1905:20:6"}],"functionName":{"name":"mstore","nativeSrc":"1895:6:6","nodeType":"YulIdentifier","src":"1895:6:6"},"nativeSrc":"1895:31:6","nodeType":"YulFunctionCall","src":"1895:31:6"},"nativeSrc":"1895:31:6","nodeType":"YulExpressionStatement","src":"1895:31:6"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1942:1:6","nodeType":"YulLiteral","src":"1942:1:6","type":"","value":"4"},{"kind":"number","nativeSrc":"1945:4:6","nodeType":"YulLiteral","src":"1945:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"1935:6:6","nodeType":"YulIdentifier","src":"1935:6:6"},"nativeSrc":"1935:15:6","nodeType":"YulFunctionCall","src":"1935:15:6"},"nativeSrc":"1935:15:6","nodeType":"YulExpressionStatement","src":"1935:15:6"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1966:1:6","nodeType":"YulLiteral","src":"1966:1:6","type":"","value":"0"},{"kind":"number","nativeSrc":"1969:4:6","nodeType":"YulLiteral","src":"1969:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1959:6:6","nodeType":"YulIdentifier","src":"1959:6:6"},"nativeSrc":"1959:15:6","nodeType":"YulFunctionCall","src":"1959:15:6"},"nativeSrc":"1959:15:6","nodeType":"YulExpressionStatement","src":"1959:15:6"}]},"name":"panic_error_0x32","nativeSrc":"1853:127:6","nodeType":"YulFunctionDefinition","src":"1853:127:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 0x20)\n        value1 := length\n        let value := 0\n        value := calldataload(add(headStart, 0x20))\n        value2 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100625760003560e01c80632eb4a7ab1461006757806342e4964214610083578063715018a6146100a65780637cb64759146100b05780638da5cb5b146100c3578063f2fde38b146100de575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b6100966100913660046102de565b6100f1565b604051901515815260200161007a565b6100ae61013c565b005b6100ae6100be36600461035a565b610150565b6000546040516001600160a01b03909116815260200161007a565b6100ae6100ec366004610373565b610193565b60006101348484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015491508590506101d6565b949350505050565b6101446101ec565b61014e6000610219565b565b6101586101ec565b60018190556040518181527f42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b9060200160405180910390a150565b61019b6101ec565b6001600160a01b0381166101ca57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101d381610219565b50565b6000826101e38584610269565b14949350505050565b6000546001600160a01b0316331461014e5760405163118cdaa760e01b81523360048201526024016101c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b84518110156102a45761029a8286838151811061028d5761028d61039c565b60200260200101516102ac565b915060010161026e565b509392505050565b60008183106102c85760008281526020849052604090206102d7565b60008381526020839052604090205b9392505050565b6000806000604084860312156102f357600080fd5b833567ffffffffffffffff81111561030a57600080fd5b8401601f8101861361031b57600080fd5b803567ffffffffffffffff81111561033257600080fd5b8660208260051b840101111561034757600080fd5b6020918201979096509401359392505050565b60006020828403121561036c57600080fd5b5035919050565b60006020828403121561038557600080fd5b81356001600160a01b03811681146102d757600080fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212201508f4d248efd69561fb746e2dcdccb44a4474d24c8c53f3fe7b3c20c5cc428964736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x42E49642 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA6 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x70 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x96 PUSH2 0x91 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DE JUMP JUMPDEST PUSH2 0xF1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xAE PUSH2 0x13C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xAE PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x35A JUMP JUMPDEST PUSH2 0x150 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xAE PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x373 JUMP JUMPDEST PUSH2 0x193 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x134 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x1 SLOAD SWAP2 POP DUP6 SWAP1 POP PUSH2 0x1D6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x144 PUSH2 0x1EC JUMP JUMPDEST PUSH2 0x14E PUSH1 0x0 PUSH2 0x219 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x42CBC405E4DBF1B691E85B9A34B08ECFCF7A9AD9078BF4D645CCFA1FAC11C10B SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x19B PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D3 DUP2 PUSH2 0x219 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E3 DUP6 DUP5 PUSH2 0x269 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2A4 JUMPI PUSH2 0x29A DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x28D JUMPI PUSH2 0x28D PUSH2 0x39C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2AC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x26E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP8 SWAP1 SWAP7 POP SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO ADDMOD DELEGATECALL 0xD2 BASEFEE 0xEF 0xD6 SWAP6 PUSH2 0xFB74 PUSH15 0x2DCDCCB44A4474D24C8C53F3FE7B3C KECCAK256 0xC5 0xCC TIMESTAMP DUP10 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"186:503:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;233:25;;;;;;;;;160::6;;;148:2;133:18;233:25:5;;;;;;;;521:165;;;;;;:::i;:::-;;:::i;:::-;;;1096:14:6;;1089:22;1071:41;;1059:2;1044:18;521:165:5;931:187:6;2293:101:0;;;:::i;:::-;;365:148:5;;;;;;:::i;:::-;;:::i;1638:85:0:-;1684:7;1710:6;1638:85;;-1:-1:-1;;;;;1710:6:0;;;1500:51:6;;1488:2;1473:18;1638:85:0;1354:203:6;2543:215:0;;;;;;:::i;:::-;;:::i;521:165:5:-;611:4;635:43;654:5;;635:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;661:10:5;;;-1:-1:-1;673:4:5;;-1:-1:-1;635:18:5;:43::i;:::-;628:50;521:165;-1:-1:-1;;;;521:165:5:o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;365:148:5:-;1531:13:0;:11;:13::i;:::-;439:10:5::1;:24:::0;;;479:26:::1;::::0;160:25:6;;;479:26:5::1;::::0;148:2:6;133:18;479:26:5::1;;;;;;;365:148:::0;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;1500:51:6::0;1473:18;;2672:31:0::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1902:154:3:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;;1902:154;-1:-1:-1;;;;1902:154:3:o;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:1;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:1;1901:40:0;;;1500:51:6;1473:18;;1901:40:0;1354:203:6;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;2457:308:3:-;2540:7;2582:4;2540:7;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;2668:27;:51::i;:::-;2653:66;-1:-1:-1;2634:3:3;;2596:134;;;-1:-1:-1;2746:12:3;2457:308;-1:-1:-1;;;2457:308:3:o;504:169:2:-;579:7;609:1;605;:5;:61;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;605:61;;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;613:25;598:68;504:169;-1:-1:-1;;;504:169:2:o;196:730:6:-;291:6;299;307;360:2;348:9;339:7;335:23;331:32;328:52;;;376:1;373;366:12;328:52;416:9;403:23;449:18;441:6;438:30;435:50;;;481:1;478;471:12;435:50;504:22;;557:4;549:13;;545:27;-1:-1:-1;535:55:6;;586:1;583;576:12;535:55;626:2;613:16;652:18;644:6;641:30;638:50;;;684:1;681;674:12;638:50;739:7;732:4;722:6;719:1;715:14;711:2;707:23;703:34;700:47;697:67;;;760:1;757;750:12;697:67;791:4;783:13;;;;815:6;;-1:-1:-1;875:20:6;;862:34;;196:730;-1:-1:-1;;;196:730:6:o;1123:226::-;1182:6;1235:2;1223:9;1214:7;1210:23;1206:32;1203:52;;;1251:1;1248;1241:12;1203:52;-1:-1:-1;1296:23:6;;1123:226;-1:-1:-1;1123:226:6:o;1562:286::-;1621:6;1674:2;1662:9;1653:7;1649:23;1645:32;1642:52;;;1690:1;1687;1680:12;1642:52;1716:23;;-1:-1:-1;;;;;1768:31:6;;1758:42;;1748:70;;1814:1;1811;1804:12;1853:127;1914:10;1909:3;1905:20;1902:1;1895:31;1945:4;1942:1;1935:15;1969:4;1966:1;1959:15"},"methodIdentifiers":{"merkleRoot()":"2eb4a7ab","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setMerkleRoot(bytes32)":"7cb64759","transferOwnership(address)":"f2fde38b","verifyTransaction(bytes32[],bytes32)":"42e49642"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"verifyTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleProofVerifier.sol\":\"MerkleProofVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"contracts/MerkleProofVerifier.sol\":{\"keccak256\":\"0xd6d81c10d6adf4dc04f064859789d26d4d1c1b92044405d69a20e93ba986ba7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://442afb9b6d1ecc5fc5d69e2f9be2af37db1473b958271a1cafed8f70f1249458\",\"dweb:/ipfs/QmYGMNkLkrkHHL2Hdu44UPcwXAXAawD9kKJMHoMdRPWK74\"]}},\"version\":1}"}}}}}